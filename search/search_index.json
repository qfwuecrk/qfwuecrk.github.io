{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":""},{"location":"#_1","title":"\u4ecb\u7ecd\u8bf4\u660e","text":"<p>\u8fd9\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u76f8\u5173\u7684\u77e5\u8bc6\u70b9\u603b\u7ed3\u3002\u5305\u62ec\uff1a\u7cfb\u7edf\u6982\u8bba\u3001\u6307\u4ee4\u96c6\u3001\u7f16\u7a0b\u8bed\u8a00\u3001\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u3001\u64cd\u4f5c\u7cfb\u7edf\u3002\u53e6\u5305\u62ec\u6570\u5b66\u548c\u82f1\u8bed\u3002\u5982\u679c\u6709\u9700\u8981\u540e\u9762\u4e5f\u4f1a\u52a0\u5165\u6587\u5b66\u548c\u5386\u53f2\u3002</p>"},{"location":"Algorithms/","title":"\u7b97\u6cd5","text":""},{"location":"C_Cpp/","title":"C/C++","text":""},{"location":"C_Cpp/#cc_1","title":"C/C++ \u7ec3\u4e60\u5efa\u8bae","text":"\u4e13\u9879\u7ec3\u4e60\u540d\u79f0 \u91cd\u70b9\u548c\u5efa\u8bae 1. \u65e0\u8f93\u5165\u4e13\u9879 \u7ec3\u4e60\u7ed3\u6784\u3001\u57fa\u672c\u8bed\u6cd5\u3001\u719f\u6089OJ 2. \u8f93\u5165\u8f93\u51fa\u4e13\u9879\uff08\u4e00\uff09 \u7406\u6e05\u8be5\u7c7b\u95ee\u9898\u7684\u57fa\u672c\u5f62\u5f0f\u3001\u505a\u7b80\u5355\u8f93\u5165 3. \u8f93\u5165\u8f93\u51fa\u4e13\u9879\uff08\u4e8c\uff09 \u8f93\u5165\u5f62\u5f0f\u591a\u6837\u5316\u3001\u8ba1\u7b97\u5185\u5bb9\u590d\u6742\u5316 4. \u7c7b\u578b\u8f6c\u6362\u4e13\u9879 \u7ec3\u4e60\u7c7b\u578b\u8f6c\u6362\u51fd\u6570\u3001\u6c42\u5b57\u8282\u6570\u7b49\u64cd\u4f5c\uff0c\u591a\u79cd\u7c7b\u578b int\u3001float\u3001char\u3001double\u3001long long \u7b49 5. \u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa\u4e13\u9879 \u7ec3\u4e60\u591a\u79cd\u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa\u51fd\u6570 6. \u9009\u62e9\u7ed3\u6784\u4e13\u9879\uff08\u4e00\uff09 \u7ec3\u4e60 if switch \u7ed3\u6784\u3002\u5185\u5bb9\u57fa\u7840\uff0c\u5355\u5c42\u903b\u8f91\uff0c\u91cd\u70b9\u5728\u8fd0\u7b97\u5173\u7cfb\u4e0a 7. \u9009\u62e9\u7ed3\u6784\u4e13\u9879\uff08\u4e8c\uff09 \u7ec3\u4e60\u591a\u5c42\u590d\u6742\u5d4c\u5957\u7ed3\u6784 8. \u5faa\u73af\u7ed3\u6784\u4e13\u9879\uff08\u4e00\uff09 \u7ec3\u4e60\u57fa\u672c\u7684 for \u5faa\u73af\u5f62\u5f0f 9. \u5faa\u73af\u7ed3\u6784\u4e13\u9879\uff08\u4e8c\uff09 \u7ec3\u4e60\u5faa\u73af\u5224\u65ad\u3001\u7edf\u8ba1\u3001\u7b5b\u9009\u7b49\u5355\u5c42\u5faa\u73af\u7684\u57fa\u672c\u9898\u578b 10. \u5faa\u73af\u7ed3\u6784\u4e13\u9879\uff08\u4e09\uff09 \u7ec3\u4e60\u5faa\u73af\u7684\u5d4c\u5957\u8868\u8fbe 11. freopen \u7ec3\u4e60\u4f7f\u7528freopen 12. GCD \u6570\u4f4d\u62c6\u5206 \u5e42 \u81ea\u5e42\u6570 GCD LCM \u8d28\u6570 \u8d28\u56e0\u6570\u5206\u89e3 13. \u5b57\u7b26\u4e32\u5904\u7406\u4e13\u9879 string\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u5e93\u64cd\u4f5c 14. \u4e00\u7ef4\u6570\u7ec4\u4e13\u9879\uff08\u4e00\uff09 \u6570\u7ec4\u7684\u57fa\u672c\u5f62\u5f0f\u548c\u57fa\u672c\u7ec3\u4e60 15. \u4e00\u7ef4\u6570\u7ec4\u4e13\u9879\uff08\u4e8c\uff09 \u7ec3\u4e60\u6570\u7ec4\u7684\u64cd\u4f5c 16. \u4e8c\u7ef4\u6570\u7ec4\u4e13\u9879 \u4e8c\u7ef4\u6570\u7ec4\u57fa\u672c\u64cd\u4f5c\u7ec3\u4e60 17. \u679a\u4e3e\u7b97\u6cd5\u4e13\u9898\uff08\u57fa\u7840\u7b97\u6cd5\uff09 \u57fa\u7840\u679a\u4e3e\u7b97\u6cd5\u7ec3\u4e60\u3001\u57fa\u672c\u51fd\u6570\u7684\u4f7f\u7528 18. \u6a21\u62df\u7b97\u6cd5\u4e13\u9898\uff08\u57fa\u7840\u7b97\u6cd5\uff09 \u57fa\u7840\u6a21\u62df\u7b97\u6cd5\u7ec3\u4e60\u3001\u53cc\u6307\u9488\u7ec3\u4e60 19. \u67e5\u627e\u7b97\u6cd5\u4e13\u9898 \u4e8c\u5206\u67e5\u627e\u3001\u987a\u5e8f\u67e5\u627e 20. \u6392\u5e8f\u4e13\u9898 \u7ed3\u6784\u4f53\u3001sort\u3001\u5192\u6ce1\u3001\u9009\u62e9\u3001\u8ba1\u6570\u3001\u63d2\u5165 21. \u51fd\u6570\u4e13\u9898 \u51fd\u6570\u7684\u5b9a\u4e49\u3001\u4f20\u53c2\u3001\u8c03\u7528 22. \u57fa\u7840\u9012\u5f52\u4e13\u9898 \u57fa\u672c\u7684\u9012\u5f52\u601d\u60f3\u3001\u9012\u5f52\u4e0e\u51fd\u6570\u6808 23. STL STL\u76f8\u5173\u51fd\u6570\u4f7f\u7528"},{"location":"C_Cpp/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/","title":"C/C++\u7a0b\u5e8f\u7ed3\u6784","text":""},{"location":"C_Cpp/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/#c","title":"C\u7a0b\u5e8f\u7ed3\u6784","text":"<pre><code>// \u57fa\u672c\u7ed3\u6784\n#include &lt;stdio.h&gt;\nint main()\n{\n    printf(\"hello, world\\n\");\n    return 0;\n}\n\n// \u4e3b\u51fd\u6570\u53c2\u6570\n#include &lt;stdio.h&gt;\nint main(int argc, char **argv)\n{\n    printf(\"hello, world\\n\");\n    return 0;\n}\n\n// exit\u7ed3\u675f\u8fdb\u7a0b\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main()\n{\n    printf(\"hello, world\\n\");\n    exit(0);\n}\n</code></pre> <p>C\u7a0b\u5e8f\u4e3b\u51fd\u6570\u53c2\u6570\u5f62\u5f0f</p> <pre><code>int main(int argc, char *argv[])\n</code></pre>"},{"location":"C_Cpp/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/#c_1","title":"C++\u7a0b\u5e8f\u7ed3\u6784","text":"<p>\u540c\u5b66\u4eec\u5f00\u59cb\u8fd9\u95e8\u8bfe\u65f6\uff0c\u6700\u76f4\u63a5\u7684\u9700\u6c42\u4fbf\u662f\u5199\u51fa\u4e00\u4e2a\u7a0b\u5e8f\u3002\u51e0\u4e4e\u6bcf\u4e00\u4f4d\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u7684\u540c\u5b66\u7f16\u5199\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u662f\u4e00\u6837\u7684\uff0c\u8f93\u51fa\u4e00\u4e2ahello\uff0cworld\u3002</p> <pre><code>#include &lt;iostream&gt; // \u5934\u6587\u4ef6\n\nusing namespace std; // \u547d\u540d\u7a7a\u95f4\n\nint main() // \u5b9a\u4e49main\u51fd\u6570\n{\n\n    // cout \u5c06 Hello, World \u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\n    cout &lt;&lt; \"Hello, World!\" &lt;&lt; endl;\n\n    return 0; // \u7a0b\u5e8f\u6b63\u5e38\u7ed3\u675f\n}\n</code></pre> <p>\u6210\u529f\u8fd0\u884c\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u662f\u975e\u5e38\u4ee4\u4eba\u6fc0\u52a8\u7684\u3002\u73b0\u5728\u6211\u4eec\u8981\u5bf9\u8fd9\u4e2a\u7a0b\u5e8f\u8fdb\u884c\u4e00\u4e9b\u5fc5\u8981\u7684\u8bf4\u660e\u3002</p> <ol> <li>C++\u7a0b\u5e8f\u662f\u7531\u51fd\u6570\u548c\u53d8\u91cf\u7ec4\u6210\u7684\u3002\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u4f1a\u4ecemain\u51fd\u6570\u5f00\u59cb\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4c++\u7a0b\u5e8f\u5fc5\u987b\u5305\u542bmain\u51fd\u6570\u3002\u5728\u51fd\u6570\u7684\u7ed3\u5c3e\u8981\u5199\u4e0areturn 0\uff0c\u8fd9\u4e0emain\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578bint\u4fdd\u6301\u4e00\u81f4\u3002</li> <li>\u7b2c\u4e00\u884c #include\u7684\u610f\u601d\u662f\u5305\u542b\u5934\u6587\u4ef6iostream\u3002\u5355\u72ec\u7684main\u51fd\u6570\u5e76\u4e0d\u80fd\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u51fahello\uff0cworld\u3002\u8ba9\u7535\u8111\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u6587\u5b57\u7684\u65b9\u6cd5\u5728iostream\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u8fd9\u4e2a\u6587\u4ef6\u3002\u5934\u6587\u4ef6iostream\u4e2d\u7684io\uff08input/output\uff09\u6307\u8f93\u5165\u548c\u8f93\u51fa\u3002</li> <li>\u8981\u60f3\u4f7fiostream\u4e2d\u7684\u5b9a\u4e49\u5bf9\u7a0b\u5e8f\u53ef\u7528\uff0c\u9700\u8981\u5199\u4e0a\u540d\u79f0\u7a7a\u95f4\u7f16\u8bd1\u6307\u4ee4\uff1ausing namespace std;</li> <li>cout &lt;&lt; \"Hello, World!\" &lt;&lt; endl; \u8bed\u53e5\u8f93\u51fa\u4e86\u4fe1\u606f\u201chello\uff0cworld\u201d\u3002\u5728c++\u4e2d\uff0c\u8f93\u51fa\u662f\u4e00\u4e2a\u6d41\u3002cout \u5bf9\u8c61\u8868\u793a\u8fd9\u79cd\u6d41\uff0c\u5b83\u7684\u5c5e\u6027\u662f\u5728iostream\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u3002\u63d2\u5165\u8fd0\u7b97\u7b26\uff08&lt;&lt;\uff09\u53ef\u4ee5\u5c06\u5b83\u53f3\u4fa7\u7684\u4fe1\u606f\u63d2\u5165\u5230\u8f93\u51fa\u6d41\u4e2d\u3002endl\u7684\u4f5c\u7528\u662f\u6362\u884c\uff0c\u5b83\u4e5f\u662f\u5728iostream\u4e2d\u5b9a\u4e49\u7684\u3002</li> </ol> <p>\u5728\u7ade\u8d5b\u4e2d\u7ecf\u5e38\u4f1a\u7528\u5230\u7684\u5934\u6587\u4ef6</p> <pre><code>// \u4fd7\u79f0\u4e07\u80fd\u5934\u6587\u4ef6\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"Hello, World!\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"C_Cpp/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/#gcc","title":"gcc\u7f16\u8bd1\u793a\u4f8b","text":"<p>C\u6e90\u7a0b\u5e8f -&gt; \u9884\u5904\u7406 -&gt; \u7f16\u8bd1 -&gt; \u6c47\u7f16 -&gt; \u94fe\u63a5 -&gt; \u53ef\u6267\u884c\u6587\u4ef6</p> <ol> <li>\u9884\u5904\u7406\u3002\u7a0b\u5e8f\u4e2d\u4ee5'#'\u53f7\u5f00\u5934\u7684\u90e8\u5206\u5728\u8fd9\u4e2a\u65f6\u5019\u5904\u7406\u3002\u9884\u5904\u7406\u6587\u4ef6\u4ee5.i\u7ed3\u5c3e\u3002 <pre><code>gcc -E hello.c &gt; hello.i\n</code></pre></li> <li>\u7f16\u8bd1\u3002\u7f16\u8bd1\u51fa\u6c47\u7f16\u6587\u4ef6\uff0c\u6c47\u7f16\u6587\u4ef6\u4ee5.s\u7ed3\u5c3e\u3002 <pre><code>gcc -S hello.i\n</code></pre></li> <li>\u6c47\u7f16\u3002\u5bf9\u6c47\u7f16\u6587\u4ef6\u8fdb\u884c\u6c47\u7f16\u751f\u6210\u4ee5.o\u7ed3\u5c3e\u7684\u76ee\u6807\u6587\u4ef6\u3002 <pre><code>gcc -c hello.s\n</code></pre></li> <li>\u94fe\u63a5\u3002\u5c06\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u540e\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 <pre><code>gcc hello.o -o hello\n</code></pre></li> </ol> <p>\u7f16\u8bd1\u65f6\u663e\u793a\u6240\u6709\u7684\u9519\u8bef\u6216\u8b66\u544a\u53ef\u4ee5\u6dfb\u52a0\u5982\u4e0b\u9009\u9879</p> <pre><code>gcc hello.c -Wall\n</code></pre>"},{"location":"C_Cpp/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"\u6570\u636e\u7c7b\u578b","text":"<p>\u6570\u636e\u7c7b\u578b\u53c2\u8003MSVC\u7684\u6587\u6863\uff0c\u5c3d\u91cf\u79fb\u9664Microsoft\u4e13\u7528\u90e8\u5206\u3002</p>"},{"location":"C_Cpp/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#c","title":"C\u8bed\u8a00\u6570\u636e\u7c7b\u578b","text":""},{"location":"C_Cpp/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_2","title":"\u6570\u636e\u7c7b\u578b","text":"<p>\u7c7b\u578b\u8bf4\u660e\u7b26</p> \u7c7b\u578b \u5b58\u50a8 char, unsigned char, signed char 1 \u4e2a\u5b57\u8282 short\uff0cunsigned short 2 \u4e2a\u5b57\u8282 int\uff0cunsigned int 4 \u4e2a\u5b57\u8282 long\uff0cunsigned long 4 \u4e2a\u5b57\u8282 long long\uff0cunsigned long long 8 \u4e2a\u5b57\u8282 float 4 \u4e2a\u5b57\u8282 double 8 \u4e2a\u5b57\u8282 long double 8 \u4e2a\u5b57\u8282 <p>\u7c7b\u578b\u8bf4\u660e\u7b26\u548c\u7b49\u6548\u9879</p> \u7c7b\u578b\u8bf4\u660e\u7b26 \u7b49\u6548\u9879 signed char char signed int signed\uff0cint signed short int short\uff0csigned short signed long int long\uff0csigned long unsigned char \u2014 unsigned int unsigned unsigned short int unsigned short unsigned long int unsigned long float \u2014 long double \u2014 <p>\u8bf4\u660e</p> <p>C \u6570\u636e\u7c7b\u578b\u5c5e\u4e8e\u5e38\u89c4\u7c7b\u522b\u3002 \u6574\u578b\u7c7b\u578b\u5305\u62ec<code>int</code>\u3001<code>char</code>\u3001<code>short</code>\u3001<code>long</code> \u548c <code>long long</code>\u3002 \u8fd9\u4e9b\u7c7b\u578b\u53ef\u4f7f\u7528 <code>signed</code> \u6216 <code>unsigned</code> \u8fdb\u884c\u9650\u5b9a\uff0c<code>unsigned</code> \u672c\u8eab\u53ef\u4ee5\u7528\u4f5c <code>unsigned int</code> \u7684\u7b80\u5199\u3002 \u679a\u4e3e\u7c7b\u578b (<code>enum</code>) \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e5f\u88ab\u89c6\u4e3a\u6574\u578b\u7c7b\u578b\u3002 \u6d6e\u70b9\u7c7b\u578b\u5305\u62ec<code>float\u3001double</code> \u548c <code>long double</code>\u3002 \u201c\u7b97\u672f\u7c7b\u578b\u201d\u5305\u62ec\u6240\u6709\u6d6e\u70b9\u578b\u548c\u6574\u578b\u7c7b\u578b \u3002</p> <p>\u8bf4\u660e</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c<code>char</code> \u578b\u4e00\u822c\u5360\u4e00\u4e2a\u5b57\u82828\u4f4d\u3002 <code>int</code> \u4e00\u822c\u5360\u4e00\u4e2a\u673a\u5668\u5b57\u957f\uff0c4\u4e2a\u5b57\u828232\u4f4d\u3002<code>short</code> \u578b\u53602\u4e2a\u5b57\u828216\u4f4d\u3002 <code>long</code> \u578b\u548c <code>float</code> \u578b\u4e00\u822c\u4e0e <code>int</code> \u4e00\u6837\u5927\u3002 <code>double</code> \u7c7b\u578b\u76f8\u5f53\u4e8e\u4e24\u4e2a <code>float</code> \u7c7b\u578b64\u4f4d\u3002</p> <ul> <li> <p>char \u7c7b\u578b\u3002<code>char</code> \u7c7b\u578b\u7528\u4e8e\u5b58\u50a8\u53ef\u8868\u793a\u7684\u5b57\u7b26\u96c6\u7684\u6210\u5458\u7684\u6574\u6570\u503c\u3002 \u8be5\u6574\u6570\u503c\u662f\u4e0e\u6307\u5b9a\u5b57\u7b26\u5bf9\u5e94\u7684 ASCII \u4ee3\u7801\u3002</p> <p>ANSI 3.2.1.1\u201c\u666e\u901a\u201d <code>char</code> \u7684\u503c\u8303\u56f4\u662f\u5426\u4e0e <code>signed char</code> \u6216 <code>unsigned char</code> \u76f8\u540c\uff08\u8fd9\u53e5\u8bdd\u662f\u8bf4char\u7c7b\u578b\u53ef\u4ee5\u7531\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\u3002\u5176\u5b9e\u76f8\u5f53\u4e8e\u6709\u7f16\u8bd1\u5668\u51b3\u5b9a\u6709\u65e0\u7b26\u53f7\u4e86\uff09\u3002</p> <p>\u6240\u6709\u5e26\u7b26\u53f7\u7684\u5b57\u7b26\u503c\u7684\u8303\u56f4\u90fd\u4ecb\u4e8e -128 \u548c 127 \u4e4b\u95f4\u3002 \u6240\u6709\u65e0\u7b26\u53f7\u7684\u5b57\u7b26\u503c\u7684\u8303\u56f4\u4ecb\u4e8e 0 \u548c 255 \u4e4b\u95f4\u3002</p> <p>\u8f6c\u4e49\u5e8f\u5217</p> \u8f6c\u4e49\u5e8f\u5217 \u5b57\u7b26 ASCII \u503c \\a \u63d0\u9192/\u54cd\u94c3 7 \\b Backspace 8 \\f \u6362\u9875 12 \\n \u6362\u884c\u7b26 10 \\r \u56de\u8f66 13 \\t \u6c34\u5e73\u5236\u8868\u7b26 9 \\v \u5782\u76f4\u5236\u8868\u7b26 11 \\\" \u53cc\u5f15\u53f7 34 \\' \u5355\u5f15\u53f7 39 \\ \u53cd\u659c\u6760 92 </li> <li> <p>int \u7c7b\u578b\u3002<code>signed int</code> \u6216 <code>unsigned int</code> \u9879\u7684\u5927\u5c0f\u662f\u7279\u5b9a\u8ba1\u7b97\u673a\u4e0a\u7684\u6807\u51c6\u6574\u6570\u5927\u5c0f\u3002 \u4f8b\u5982\uff0c\u5728 16 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c<code>int</code> \u7c7b\u578b\u901a\u5e38\u662f 16 \u4f4d\uff08\u6216 2 \u5b57\u8282\uff09\u3002 \u5728 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0cint \u7c7b\u578b\u901a\u5e38\u662f 32 \u4f4d\uff08\u6216 4 \u5b57\u8282\uff09\u3002 \u56e0\u6b64\uff0c<code>int</code> \u7c7b\u578b\u4e0e <code>short int</code> \u6216 <code>long int</code> \u7c7b\u578b\u7b49\u6548\uff0c<code>unsigned int</code> \u7c7b\u578b\u4e0e <code>unsigned short</code> \u6216 <code>unsigned long</code> \u7c7b\u578b\u7b49\u6548\uff0c\u5177\u4f53\u89c6\u76ee\u6807\u73af\u5883\u800c\u5b9a\u3002 \u9664\u975e\u53e6\u6709\u89c4\u5b9a\uff0c\u5426\u5219\u6240\u6709 <code>int</code> \u7c7b\u578b\u90fd\u8868\u793a\u5e26\u7b26\u53f7\u503c\u3002</p> <p>\u7c7b\u578b\u8bf4\u660e\u7b26 <code>int</code> \u548c <code>unsigned int</code>\uff08\u6216\u7b80\u5199\u4e3a <code>unsigned</code>\uff09\u5b9a\u4e49 C \u8bed\u8a00\u7684\u67d0\u4e9b\u529f\u80fd\uff08\u4f8b\u5982\uff0c<code>enum</code> \u7c7b\u578b\uff09\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7279\u5b9a\u5b9e\u73b0\u7684 <code>int</code> \u548c <code>unsigned int</code> \u7684\u5b9a\u4e49\u51b3\u5b9a\u4e86\u5b9e\u9645\u5b58\u50a8\u3002</p> <p>\u6574\u6570\u503c\u7684\u8303\u56f4</p> \u7c7b\u578b \u6700\u5c0f\u503c\u548c\u6700\u5927\u503c signed short -32768 \u5230 32767 unsigned long 0 \u5230 4294967295 signed long -2147483648 \u5230 2147483647 </li> <li> <p>float \u7c7b\u578b\u3002\u6d6e\u70b9\u6570\u4f7f\u7528 IEEE\uff08\u7535\u6c14\u548c\u7535\u5b50\u5de5\u7a0b\u5e08\u534f\u4f1a\uff09\u683c\u5f0f\u3002 \u6d6e\u70b9\u7c7b\u578b\u7684\u5355\u7cbe\u5ea6\u503c\u5177\u6709 4 \u4e2a\u5b57\u8282\uff0c\u5305\u62ec\u4e00\u4e2a\u7b26\u53f7\u4f4d\u3001\u4e00\u4e2a 8 \u4f4d excess-127 \u4e8c\u8fdb\u5236\u6307\u6570\u548c\u4e00\u4e2a 23 \u4f4d\u5c3e\u6570\u3002 \u5c3e\u6570\u8868\u793a\u4e00\u4e2a\u4ecb\u4e8e 1.0 \u548c 2.0 \u4e4b\u95f4\u7684\u6570\u3002 \u7531\u4e8e\u5c3e\u6570\u7684\u9ad8\u987a\u5e8f\u4f4d\u59cb\u7ec8\u4e3a 1\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u4ee5\u6570\u5b57\u5f62\u5f0f\u5b58\u50a8\u7684\u3002 \u6b64\u8868\u793a\u5f62\u5f0f\u4e3a float \u7c7b\u578b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5927\u7ea6\u5728 3.4E-38 \u548c 3.4E+38 \u4e4b\u95f4\u7684\u8303\u56f4\u3002</p> <p>\u60a8\u53ef\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u6c42\u5c06\u53d8\u91cf\u58f0\u660e\u4e3a float \u6216 double\u3002 \u8fd9\u4e24\u79cd\u7c7b\u578b\u4e4b\u95f4\u7684\u4e3b\u8981\u5dee\u5f02\u5728\u4e8e\u5b83\u4eec\u53ef\u8868\u793a\u7684\u57fa\u6570\u3001\u5b83\u4eec\u9700\u8981\u7684\u5b58\u50a8\u4ee5\u53ca\u5b83\u4eec\u7684\u8303\u56f4\u3002 \u4e0b\u8868\u663e\u793a\u4e86\u57fa\u6570\u4e0e\u5b58\u50a8\u9700\u6c42\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> <p>\u6d6e\u70b9\u7c7b\u578b</p> \u7c7b\u578b \u6709\u6548\u4f4d \u5b57\u8282\u6570 float 6 - 7 4 double 15 - 16 8 <p>\u6d6e\u70b9\u53d8\u91cf\u7531\u5c3e\u6570\uff08\u5305\u542b\u6570\u5b57\u7684\u503c\uff09\u548c\u6307\u6570\uff08\u5305\u542b\u6570\u5b57\u7684\u6570\u91cf\u7ea7\uff09\u8868\u793a\u3002</p> <p>\u4e0b\u8868\u663e\u793a\u4e86\u5206\u914d\u7ed9\u6bcf\u4e2a\u6d6e\u70b9\u7c7b\u578b\u7684\u5c3e\u6570\u548c\u6307\u6570\u7684\u4f4d\u6570\u3002 \u4efb\u4f55 float \u6216 double \u7684\u6700\u9ad8\u6709\u6548\u4f4d\u59cb\u7ec8\u662f\u7b26\u53f7\u4f4d\u3002 \u5982\u679c\u7b26\u53f7\u4f4d\u4e3a 1\uff0c\u5219\u5c06\u6570\u5b57\u89c6\u4e3a\u8d1f\u6570\uff1b\u5426\u5219\uff0c\u5c06\u6570\u5b57\u89c6\u4e3a\u6b63\u6570\u3002</p> <p>\u6307\u6570\u548c\u5c3e\u6570\u7684\u957f\u5ea6</p> \u7c7b\u578b \u6307\u6570\u957f\u5ea6 \u5c3e\u6570\u957f\u5ea6 float 8 \u4f4d 23 \u4f4d double 11 \u4f4d 52 \u4f4d <p>\u7531\u4e8e\u6307\u6570\u662f\u4ee5\u65e0\u7b26\u53f7\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u56e0\u6b64\u6307\u6570\u7684\u504f\u5dee\u4e3a\u5176\u53ef\u80fd\u503c\u7684\u4e00\u534a\u3002 \u5bf9\u4e8e float \u7c7b\u578b\uff0c\u504f\u5dee\u4e3a 127\uff1b\u5bf9\u4e8e double \u7c7b\u578b\uff0c\u504f\u5dee\u4e3a 1023\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u6307\u6570\u503c\u51cf\u53bb\u504f\u5dee\u503c\u6765\u8ba1\u7b97\u5b9e\u9645\u6307\u6570\u503c\u3002</p> <p>\u5b58\u50a8\u4e3a\u4e8c\u8fdb\u5236\u5206\u6570\u7684\u5c3e\u6570\u5927\u4e8e\u6216\u7b49\u4e8e 1 \u4e14\u5c0f\u4e8e 2\u3002 \u5bf9\u4e8e float \u548c double \u7c7b\u578b\uff0c\u6700\u9ad8\u6709\u6548\u4f4d\u4f4d\u7f6e\u7684\u5c3e\u6570\u4e2d\u6709\u4e00\u4e2a\u9690\u542b\u7684\u524d\u5bfc 1\uff0c\u8fd9\u6837\uff0c\u5c3e\u6570\u5b9e\u9645\u4e0a\u5206\u522b\u4e3a 24 \u548c 53 \u4f4d\u957f\uff0c\u5373\u4f7f\u6700\u9ad8\u6709\u6548\u4f4d\u4ece\u672a\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u4e5f\u662f\u5982\u6b64\u3002</p> <p>\u6d6e\u70b9\u5305\u53ef\u4ee5\u5c06\u4e8c\u8fdb\u5236\u6d6e\u70b9\u6570\u5b58\u50a8\u4e3a\u975e\u6807\u51c6\u5316\u6570\uff0c\u800c\u4e0d\u4f7f\u7528\u521a\u521a\u4ecb\u7ecd\u7684\u5b58\u50a8\u65b9\u6cd5\u3002 \u201c\u975e\u6807\u51c6\u5316\u6570\u201d\u662f\u5e26\u6709\u4fdd\u7559\u6307\u6570\u503c\u7684\u975e\u96f6\u6d6e\u70b9\u6570\uff0c\u5176\u4e2d\u5c3e\u6570\u7684\u6700\u9ad8\u6709\u6548\u4f4d\u4e3a 0\u3002 \u901a\u8fc7\u4f7f\u7528\u975e\u6807\u51c6\u5316\u683c\u5f0f\uff0c\u6d6e\u70b9\u6570\u7684\u8303\u56f4\u53ef\u4ee5\u6269\u5c55\uff0c\u4f46\u4f1a\u5931\u53bb\u7cbe\u5ea6\u3002 \u60a8\u65e0\u6cd5\u63a7\u5236\u6d6e\u70b9\u6570\u4ee5\u6807\u51c6\u5316\u5f62\u5f0f\u8fd8\u662f\u975e\u6807\u51c6\u5316\u5f62\u5f0f\u8868\u793a\uff1b\u6d6e\u70b9\u5305\u51b3\u5b9a\u4e86\u8868\u793a\u5f62\u5f0f\u3002 \u6d6e\u70b9\u5305\u4ece\u4e0d\u4f7f\u7528\u975e\u6807\u51c6\u5316\u5f62\u5f0f\uff0c\u9664\u975e\u6307\u6570\u53d8\u4e3a\u5c0f\u4e8e\u53ef\u4ee5\u6807\u51c6\u5316\u5f62\u5f0f\u8868\u793a\u7684\u6700\u5c0f\u503c\u3002</p> <p>\u4e0b\u8868\u663e\u793a\u4e86\u53ef\u5728\u6bcf\u79cd\u6d6e\u70b9\u7c7b\u578b\u7684\u53d8\u91cf\u4e2d\u5b58\u50a8\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002 \u6b64\u8868\u4e2d\u6240\u5217\u7684\u503c\u4ec5\u9002\u7528\u4e8e\u6807\u51c6\u5316\u6d6e\u70b9\u6570\uff1b\u975e\u6807\u51c6\u5316\u6d6e\u70b9\u6570\u7684\u6700\u5c0f\u503c\u66f4\u5c0f\u3002 \u8bf7\u6ce8\u610f\uff0c\u5728 80x87 \u5bc4\u5b58\u5668\u4e2d\u4fdd\u7559\u7684\u6570\u5b57\u59cb\u7ec8\u4ee5 80 \u4f4d\u6807\u51c6\u5316\u5f62\u5f0f\u8868\u793a\uff1b\u6570\u5b57\u5b58\u50a8\u5728 32 \u4f4d\u6216 64 \u4f4d\u6d6e\u70b9\u53d8\u91cf\uff08float \u7c7b\u578b\u548c long \u7c7b\u578b\u7684\u53d8\u91cf\uff09\u4e2d\u65f6\u53ea\u80fd\u4ee5\u975e\u6807\u51c6\u5316\u5f62\u5f0f\u8868\u793a\u3002</p> <p>\u6d6e\u70b9\u7c7b\u578b\u7684\u8303\u56f4</p> \u7c7b\u578b \u6700\u5c0f\u503c \u6700\u5927\u503c \u6d6e\u52a8 1.175494351 E - 38 3.402823466 E + 38 double 2.2250738585072014 E - 308 1.7976931348623158 E + 308 <p>\u5982\u679c\u5b58\u50a8\u6bd4\u7cbe\u5ea6\u66f4\u91cd\u8981\uff0c\u8bf7\u8003\u8651\u5bf9\u6d6e\u70b9\u53d8\u91cf\u4f7f\u7528 float \u7c7b\u578b\u3002 \u76f8\u53cd\uff0c\u5982\u679c\u7cbe\u5ea6\u662f\u6700\u91cd\u8981\u7684\u6761\u4ef6\uff0c\u5219\u4f7f\u7528 double \u7c7b\u578b\u3002</p> <p>\u6d6e\u70b9\u53d8\u91cf\u53ef\u4ee5\u63d0\u5347\u4e3a\u66f4\u5927\u57fa\u6570\u7684\u7c7b\u578b\uff08\u4ece float \u7c7b\u578b\u5230 double \u7c7b\u578b\uff09\u3002 \u5f53\u60a8\u5bf9\u6d6e\u70b9\u53d8\u91cf\u6267\u884c\u7b97\u672f\u65f6\uff0c\u901a\u5e38\u4f1a\u51fa\u73b0\u63d0\u5347\u3002 \u6b64\u7b97\u672f\u59cb\u7ec8\u4ee5\u4e0e\u5177\u6709\u6700\u9ad8\u7cbe\u5ea6\u7684\u53d8\u91cf\u4e00\u6837\u9ad8\u7684\u7cbe\u5ea6\u6267\u884c\u3002 \u4f8b\u5982\uff0c\u8bf7\u8003\u8651\u4e0b\u5217\u7c7b\u578b\u58f0\u660e\uff1a</p> <pre><code>float f_short;\ndouble f_long;\nlong double f_longer;\n\nf_short = f_short * f_long;\n</code></pre> <p>\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53d8\u91cf f_short \u63d0\u5347\u5230\u7c7b\u578b double \u5e76\u4e14\u4e0e f_long \u76f8\u4e58\uff1b\u7136\u540e\uff0c\u7ed3\u679c\u820d\u5165\u5230\u7c7b\u578b float\uff0c\u7136\u540e\u8d4b\u7ed9 f_short\u3002</p> <p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff08\u4f7f\u7528\u524d\u9762\u793a\u4f8b\u4e2d\u7684\u58f0\u660e\uff09\uff0c\u5c06\u4ee5\u6d6e\u70b9\uff0832 \u4f4d\uff09\u7cbe\u5ea6\u5bf9\u53d8\u91cf\u6267\u884c\u7b97\u672f\uff1b\u7ed3\u679c\u968f\u540e\u5c06\u63d0\u5347\u5230 double \u7c7b\u578b\uff1a</p> <pre><code>f_longer = f_short * f_short;\n</code></pre> </li> <li> <p>\u7c7b\u578b double\u3002\u53cc\u7cbe\u5ea6\u7c7b\u578b\u7684\u53cc\u7cbe\u5ea6\u503c\u5177\u6709 8 \u4e2a\u5b57\u8282\u3002 \u6b64\u683c\u5f0f\u7c7b\u4f3c\u4e8e\u6d6e\u70b9\u683c\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u8be5\u683c\u5f0f\u5177\u6709\u4e00\u4e2a 11 \u4f4d excess-1023 \u6307\u6570\u548c\u4e00\u4e2a 52 \u4f4d\u5c3e\u6570\u4ee5\u53ca\u9690\u542b\u7684\u9ad8\u987a\u5e8f 1 \u4f4d\u3002 \u6b64\u683c\u5f0f\u4e3a\u53cc\u7cbe\u5ea6\u7c7b\u578b\u63d0\u4f9b\u7684\u8303\u56f4\u5927\u7ea6\u4ecb\u4e8e 1.7E-308 \u548c 1.7E+308 \u4e4b\u95f4\u3002</p> </li> <li> <p>\u957f\u53cc\u7cbe\u5ea6\u7c7b\u578b\u3002<code>long double</code> \u7c7b\u578b\u4e0e <code>double</code> \u7c7b\u578b\u76f8\u540c\u3002<code>long double</code> \u7c7b\u578b\u662f\u5927\u4e8e\u6216\u7b49\u4e8e <code>double</code> \u7c7b\u578b\u7684\u6d6e\u70b9\u7c7b\u578b\u3002\u7279\u5b9a\u4e8e Microsoft\uff1a<code>long double</code> \u548c <code>double</code> \u7684\u8868\u793a\u5f62\u5f0f\u5b8c\u5168\u76f8\u540c\u3002 \u4f46\u662f\uff0c\u7f16\u8bd1\u5668\u5c06 <code>long double</code> \u548c <code>double</code> \u89c6\u4e3a\u975e\u91cd\u590d\u7c7b\u578b\u3002</p> </li> </ul>"},{"location":"C_Cpp/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_3","title":"\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u5b58\u50a8","text":"<p>C\u8bed\u8a00\u6807\u51c6\u4e2d\u9488\u5bf9\u6570\u503c\u5e38\u91cf\uff0c\u89c4\u5b9a\u4e86\u516b\u8fdb\u5236\u3001\u5341\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u3002\u4f46\u662f\u5bf9\u4e8c\u8fdb\u5236\u6ca1\u6709\u89c4\u5b9a\u3002\u4f46\u662f\u5f88\u591a\u7f16\u8bd1\u5668\u505a\u4e86\u62d3\u5c55\u5141\u8bb8\u5b58\u50a8\u4e8c\u8fdb\u5236\u6570\u3002</p> <p>\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u5b58\u50a8\u7531ISA\u51b3\u5b9a\u3002\u57fa\u672c\u4e0a\u6574\u6570\u4ee5\u4e8c\u8fdb\u5236\u8865\u7801\u5b58\u50a8\uff0c\u6d6e\u70b9\u6570\u9075\u5faaIEEE - 754\u3002\u53c2\u9605\u3010\u6570\u503c\u5b58\u50a8\u3011\u3002</p>"},{"location":"C_Cpp/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#c_1","title":"C++\u6570\u636e\u7c7b\u578b","text":""},{"location":"C_Cpp/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_4","title":"\u7c7b\u578b\u8f6c\u6362","text":""},{"location":"CompilerConstructionPrinciples/","title":"\u7f16\u8bd1\u539f\u7406","text":""},{"location":"ComputerScience/","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba","text":""},{"location":"ComputerScience/#_2","title":"\u6982\u8ff0","text":"<p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u5305\u542b\u8f6f\u4ef6\u7cfb\u7edf\u548c\u786c\u4ef6\u7cfb\u7edf\u3002\u4e00\u4e2a\u5b9e\u9645\u95ee\u9898\uff0c\u53ef\u4ee5\u4e00\u5c42\u5c42\u7684\u5206\u89e3\uff0c\u6700\u540e\u53d8\u4e3a\u673a\u5668\u7801\u88ab\u8ba1\u7b97\u673a\u6267\u884c\u3002</p> <ol> <li>\u95ee\u9898</li> <li>\u7b97\u6cd5</li> <li>\u9ad8\u7ea7\u8bed\u8a00\u3002\u9ad8\u7ea7\u8bed\u8a00\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u4f8b\u5982\uff1aC\u8bed\u8a00\u4e0d\u662f\u76f4\u63a5\u5efa\u7acb\u5728\u6c47\u7f16\u8bed\u8a00\u4e4b\u4e0a\u7684\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u79cd\u9ad8\u7ea7\u8bed\u8a00\uff0c\u63d0\u4f9b\u4e86\u66f4\u9ad8\u7ea7\u522b\u7684\u62bd\u8c61\u6765\u63cf\u8ff0\u7a0b\u5e8f\u903b\u8f91\u3002</li> <li> <p>\u6c47\u7f16\u8bed\u8a00\u3002\u6c47\u7f16\u8bed\u8a00\u662f\u7b26\u53f7\u66ff\u6362\u3002\u6c47\u7f16\u8bed\u8a00\u63d0\u4f9b\u4e86\u6307\u4ee4\u7684\u7b26\u53f7\u8868\u793a\uff1a\u6c47\u7f16\u8bed\u8a00\u4f7f\u7528\u52a9\u8bb0\u7b26\u6765\u8868\u793aISA\u5b9a\u4e49\u7684\u6307\u4ee4\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u5458\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u52a9\u8bb0\u7b26\u6765\u7f16\u5199\u7a0b\u5e8f\u3002</p> <p>\u793a\u4f8b</p> <pre><code>00100001000010  \u5728ISA\u4e2d\u8868\u793a \u5c06R1\u548cR2\u5bc4\u5b58\u5668\u76f8\u52a0\nADD R1, R2      \u5728\u6c47\u7f16\u4e2d\u8868\u8fbe\u4e86\u4e0a\u8ff0\u4e8c\u8fdb\u5236\u7684\u529f\u80fd\u3002\n</code></pre> </li> <li> <p>ISA\u3002\u6307\u4ee4\u96c6\u3002ISA\u662f\u8f6f\u786c\u4ef6\u7684\u6865\u6881\u3002\u5411\u4e0a\u662f\u8f6f\u4ef6\u5c42\u6b21\uff0c\u5411\u4e0b\u662f\u786c\u4ef6\u5c42\u6b21\u3002ISA\u5b9a\u4e49\u4e86\u5904\u7406\u5668\u5e94\u8be5\u505a\u4ec0\u4e48\uff08\u5373\u8f6f\u4ef6\u5c42\u9762\u7684\u63a5\u53e3\uff09\uff1bISA\u662f\u62bd\u8c61\u5c42\u6b21\u4e0a\u7684\u5b9a\u4e49\uff0c\u5b83\u63cf\u8ff0\u4e86\u5904\u7406\u5668\u7684\u80fd\u529b\u8303\u56f4\uff1b\u5fae\u7ed3\u6784\u5219\u63cf\u8ff0\u4e86\u5904\u7406\u5668\u662f\u5982\u4f55\u505a\u7684\uff08\u5373\u786c\u4ef6\u5c42\u9762\u7684\u5b9e\u73b0\uff09\u3002\u5fae\u7ed3\u6784\u662f\u5b9e\u73b0\u5c42\u6b21\u4e0a\u7684\u8bbe\u8ba1\uff0c\u5b83\u63cf\u8ff0\u4e86\u5982\u4f55\u5728\u7269\u7406\u4e0a\u5b9e\u73b0ISA\u6240\u5b9a\u4e49\u7684\u80fd\u529b\u3002</p> </li> <li>\u5fae\u7ed3\u6784\u3002\u5fae\u7ed3\u6784\u662f\u4e00\u4e9b\u903b\u8f91\u7535\u8def\u7ec4\u6210\u7684\u529f\u80fd\u5355\u5143\u3002\u5728\u903b\u8f91\u7535\u8def\u7684\u57fa\u7840\u4e0a\uff0c\u5fae\u7ed3\u6784\u8fdb\u4e00\u6b65\u5b9a\u4e49\u4e86\u5982\u4f55\u7ec4\u7ec7\u548c\u8fde\u63a5\u8fd9\u4e9b\u903b\u8f91\u7535\u8def\uff0c\u4ee5\u53ca\u5982\u4f55\u7ba1\u7406\u6570\u636e\u6d41\u52a8\u548c\u63a7\u5236\u4fe1\u53f7\u7b49\u3002</li> <li>\u903b\u8f91\u7535\u8def\u3002\u5728\u95e8\u7535\u8def\u7684\u57fa\u7840\u4e0a\u7ec4\u6210\u4e00\u4e9b\u590d\u6742\u7684\u7ed3\u6784\u3002\u903b\u8f91\u7535\u8def\uff1a\u95e8\u7535\u8def\u7ec4\u5408\u8d77\u6765\u5f62\u6210\u4e86\u5b9e\u73b0\u7279\u5b9a\u529f\u80fd\u7684\u903b\u8f91\u7535\u8def\uff0c\u5982\u52a0\u6cd5\u5668\u3001\u4e58\u6cd5\u5668\u7b49\u3002</li> <li>\u95e8\u7535\u8def\u3002\u95e8\u7535\u8def\u5728\u57fa\u672c\u5143\u5668\u4ef6\u4e0a\u6784\u6210\u4e86\u57fa\u672c\u7535\u8def\u3002\u95e8\u7535\u8def\uff1a\u8fd9\u662f\u903b\u8f91\u7535\u8def\u7684\u7269\u7406\u5b9e\u73b0\uff0c\u901a\u8fc7\u6676\u4f53\u7ba1\u7b49\u57fa\u672c\u7535\u5b50\u5143\u4ef6\u6784\u6210AND\u95e8\u3001OR\u95e8\u3001NOT\u95e8\u7b49\u903b\u8f91\u95e8\u3002</li> <li>\u5143\u5668\u4ef6\u3002\u5404\u7c7b\u5143\u5668\u4ef6\uff0c\u6676\u4f53\u7ba1\u7b49\u3002</li> </ol>"},{"location":"ComputerScience/ISA/","title":"ISA","text":""},{"location":"ComputerScience/%E5%BE%AE%E7%BB%93%E6%9E%84/","title":"\u5fae\u7ed3\u6784","text":""},{"location":"ComputerScience/%E6%95%B0%E5%80%BC%E5%AD%98%E5%82%A8/","title":"\u6570\u503c\u5b58\u50a8","text":"<p>ISA\u89c4\u5b9a\u4e86\u6574\u578b\u3001\u6d6e\u70b9\u578b\u7684\u5b58\u50a8\u5f62\u5f0f\u3002CPU\u6839\u636eISA\u6765\u8bbe\u8ba1\u5e76\u5236\u9020\u3002</p>"},{"location":"ComputerScience/%E6%95%B0%E5%80%BC%E5%AD%98%E5%82%A8/#_2","title":"\u6574\u578b\u5b58\u50a8","text":"<p>\u73b0\u4ee3\u7684ISA\u4e2d\u90fd\u662f\u4ee5\u8865\u7801\u5b58\u50a8\u6574\u6570\u3002\u53c2\u9605\u3010\u6570\u5236\u3011</p>"},{"location":"ComputerScience/%E6%95%B0%E5%80%BC%E5%AD%98%E5%82%A8/#_3","title":"\u6d6e\u70b9\u578b\u5b58\u50a8","text":"<p>\u73b0\u4ee3\u7684ISA\u4e2d\u90fd\u6d6e\u70b9\u578b\u7684\u5b58\u50a8\u57fa\u672c\u4e0a\u90fd\u9075\u5faaIEEE754\u3002</p>"},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/","title":"\u6570\u5236","text":""},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_2","title":"\u6570\u503c","text":""},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_3","title":"\u5341\u8fdb\u5236","text":"<p>\u6570\u4f4d\u7684\u542b\u4e49</p> <p>\u5341\u8fdb\u5236\u6574\u6570\u90e8\u5206\uff0c\u4e2a\u4f4d\u8868\u793a\u591a\u5c11\u4e2a1\uff0c\u5341\u4f4d\u8868\u793a\u6709\u591a\u5c11\u4e2a10\uff0c\u767e\u4f4d\u8868\u793a\u6709\u591a\u5c11\u4e2a100\u7b49\u7b49\u3002 \u5341\u8fdb\u5236\u5c0f\u6570\u90e8\u5206\uff0c\u4ece\u5de6\u5411\u53f3\u4f9d\u6b21\u8868\u793a\u591a\u5c11\u4e2a1/10\uff0c\u591a\u5c11\u4e2a1/100\uff0c\u591a\u5c11\u4e2a1/1000\u7b49\u7b49\u3002</p> <p>\u793a\u4f8b</p> <ul> <li>\u4f8b\u5982\u5341\u8fdb\u5236\u6570\uff1a123.12<ul> <li>\u67093\u4e2a1</li> <li>\u67092\u4e2a10</li> <li>\u67091\u4e2a100</li> <li>\u67091\u4e2a1/10</li> <li>\u67092\u4e2a1/100</li> </ul> </li> </ul>"},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_4","title":"\u4e8c\u8fdb\u5236","text":"<p>\u6570\u4f4d\u7684\u542b\u4e49</p> <p>\u4e8c\u8fdb\u5236\u6574\u6570\u90e8\u5206\uff0c\u6700\u4f4e\u4f4d\u5411\u4e0a\u4f9d\u6b21\u8868\u793a\u591a\u5c11\u4e2a1\uff0c\u591a\u5c11\u4e2a2\uff0c\u591a\u5c11\u4e2a4\u7b49\u7b49\u3002 \u4e8c\u8fdb\u5236\u5c0f\u6570\u90e8\u5206\uff0c\u4ece\u5de6\u5411\u53f3\u4f9d\u6b21\u8868\u793a\u591a\u5c11\u4e2a1/2\uff0c\u591a\u5c11\u4e2a1/4\uff0c\u591a\u5c11\u4e2a1/8\u7b49\u7b49\u3002</p> <p>\u793a\u4f8b</p> <ul> <li>\u4f8b\u5982\u4e8c\u8fdb\u5236\u6570\uff1a101.11<ul> <li>\u67091\u4e2a1</li> <li>\u67090\u4e2a2</li> <li>\u67091\u4e2a4</li> <li>\u67091\u4e2a1/2</li> <li>\u67091\u4e2a1/4</li> </ul> </li> </ul>"},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_5","title":"\u8fdb\u5236\u8f6c\u6362","text":""},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_6","title":"\u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236","text":""},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_7","title":"\u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236","text":""},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#8421","title":"8421\u6cd5","text":""},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_8","title":"\u539f\u7801\u8865\u7801","text":""},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_9","title":"\u539f\u7801\u8868\u793a\u6cd5","text":"<p>\u6211\u4eec\u5728\u8ba1\u7b97\u673a\u4e2d\u8ba8\u8bba\u4e8c\u8fdb\u5236\u65f6\uff0c\u5e94\u8be5\u5148\u786e\u5b9a\u8ba8\u8bba\u7684\u603b\u4f4d\u6570\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4eba\u4e3a\u7684\u7406\u89e3\u5f53\u524d\u4f4d\u6570\u4e0b\u4e8c\u8fdb\u5236\u7684\u6700\u9ad8\u4f4d\u3002</p> <ul> <li> <p>\u6709\u7b26\u53f7</p> </li> <li> <p>\u65e0\u7b26\u53f7</p> </li> </ul>"},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_10","title":"\u539f\u7801\u7684\u8ba1\u7b97","text":"<p>\u793a\u4f8b</p> <pre><code>5 + (-5) = 0\n0000 0101        5      \u539f\u7801\n1000 0101       -5      \u539f\u7801\n----------\n1000 1010        \u4f46\u662f\u539f\u7801\u8ba1\u7b97\u662f\u9519\u8bef\u7684\uff0c\u4e0d\u662f0\u3002\n</code></pre>"},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_11","title":"\u8865\u7801\u8868\u793a\u6cd5","text":"<ul> <li>\u4e3a\u4e86\u89e3\u51b3\u539f\u7801\u8868\u793a\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528\u8865\u7801\u8868\u793a\u6cd5\u3002</li> <li>\u8ba8\u8bba\u8865\u7801\uff0c\u8981\u5148\u533a\u5206\u6b63\u8d1f\u6570\u3002\u6b63\u6570\u7684\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801\u7edf\u7edf\u76f8\u7b49\u3002</li> <li>\u8d1f\u6570\u7684\u53cd\u7801\u662f\u539f\u7801\u7b26\u53f7\u4f4d\u4e0d\u53d8\uff0c\u5176\u5b83\u4f4d\u53d6\u53cd\u3002</li> <li>\u8d1f\u6570\u7684\u8865\u7801\u662f\u8d1f\u6570\u7684\u53cd\u7801 + 1</li> <li>\u5f97\u5230\u4e00\u4e2a\u8865\u7801\u53ef\u4ee5\u4ece\u6b63\u6570\uff080000 0101\u662f\u6b63\u6570\uff0c\u76f4\u63a5\u5168\u90e8\u53d6\u53cd+1\uff09\u5f97\u5230\uff0c\u4e5f\u53ef\u4ee5\u4ece\u8d1f\u6570\uff081000 0101\u662f\u8d1f\u6570\uff0c\u7b26\u53f7\u4f4d\u4e0d\u53d8\uff0c\u5176\u4f59\u4f4d\u53d6\u53cd+1\uff09\u5f97\u5230\u3002</li> <li>\u4f4d\u6269\u5c55\u3002\u6b63\u6570\u5de6\u88650\u4e0d\u6539\u53d8\u539f\u503c\u3002\u8d1f\u6570\u5de6\u88651\u4e0d\u6539\u53d8\u539f\u503c\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>5 + (-5) = 0\n0000 0101        5      \u8865\u7801\n1000 0101       -5      \u539f\u7801\n1111 1011       -5      \u8865\u7801\n\n\n0000 0101        5      \u8865\u7801\n1111 1011       -5      \u8865\u7801\n----------\n0000 0000        0      \u8865\u7801\n</code></pre>"},{"location":"ComputerScience/%E6%95%B0%E5%88%B6/#_12","title":"\u8865\u7801\u7684\u539f\u7406\u5206\u6790","text":"<ul> <li>\u65f6\u949f\u6ea2\u51fa\uff0c\u5f97\u5230\u6570\u503c\u5faa\u73af\u3002</li> <li>\u8ba1\u7b97\u673a\u5b58\u50a8\uff0c\u5728\u6307\u5b9a\u4f4d\u6570\u4e0b\uff08\u6240\u4ee5\u4e8c\u8fdb\u5236\u8ba1\u7b97\u5148\u8c08\u524d\u63d0\u6761\u4ef6\uff1a\u4f4d\u6570\uff09\u3002\u5b58\u50a8\u6ea2\u51fa\uff0c\u5f97\u5230\u6570\u503c\u5faa\u73af\u3002</li> <li>\u5728\u8fd9\u6837\u7684\u5148\u51b3\u6761\u4ef6\u4e0b\uff0c\u4ee5\u65f6\u949f\u4e3a\u4f8b\uff1a\u4ece8\u70b9\u52301\u70b9\uff0c\u53ef\u4ee5 +5 \u4e2a\u5c0f\u65f6\uff0c\u4e5f\u53ef\u4ee5 -7 \u4e2a\u5c0f\u65f6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8fd9\u6837\u4e00\u4e2a\u5faa\u73af\u5468\u671f\u4e2d +5 \u7b49\u4ef7\u4e8e -7 \u3002\u5373abs(+5) + abs(-7) = 12 = \u4e00\u4e2a\u65f6\u949f\u5faa\u73af\u5468\u671f\u3002</li> <li>\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee54\u4f4d\u4e8c\u8fdb\u5236\u4e3a\u4f8b\u30020000 ~ 1111 \u4e00\u517116\u4e2a\u6570\uff0c16\u5c31\u662f\u5faa\u73af\u5468\u671f\u3002\u7b2c17\u4e2a\u6570\u5e94\u8be5\u662f0\uff0c\u8fdb\u884c\u4e86\u6570\u503c\u5faa\u73af\u3002</li> <li>\u5982\u679c4\u4f4d\u4e8c\u8fdb\u5236\u4e0b\uff0c\u8bd5\u56fe\u6c42\u51fa 11 - 7 \u5373 1011 - 0111\uff0c\u6211\u4eec\u5e94\u8be5\u5c060111\u8f6c\u4e3a\u5b83\u5faa\u73af\u5468\u671f\u7684\u53e6\u4e00\u534a\uff0c\u4e0d\u505a\u51cf\u6cd5\u505a\u52a0\u6cd5\u300216 - 7 = 9\uff0c\u4e5f\u5c31\u662f\u5b83\u7684\u53e6\u4e00\u534a\u662f9\uff0c\u53731001\u3002</li> <li>1001\u5c31\u662f0111\u7684\u8865\u7801\uff0c1001 + 0111 \u8865\u5168\u4e86\u4e00\u4e2a\u5faa\u73af\u5468\u671f\u3002</li> <li>\u5bf9\u4e8e1001\uff0c\u5982\u679c\u770b\u6210\u65e0\u7b26\u53f7\u6570\uff0c\u5c31\u662f9\u3002\u770b\u6210\u6709\u7b26\u53f7\u539f\u7801\u5c31\u662f-1\uff0c\u770b\u6210\u6709\u7b26\u53f7\u8865\u7801\uff0c\u90a3\u5c31\u662f-7\u3002 <pre><code>    1011 - 0111 = 0100\n     11  -  7   =   4\n\n    1011 + 1001 = 0100\n     11  +  9   =   4\n</code></pre></li> </ul>"},{"location":"ComputerScience/%E6%99%B6%E4%BD%93%E7%AE%A1/","title":"\u6676\u4f53\u7ba1","text":""},{"location":"ComputerScience/%E6%B1%87%E7%BC%96/","title":"\u6c47\u7f16","text":""},{"location":"ComputerScience/%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/","title":"\u903b\u8f91\u7535\u8def","text":""},{"location":"ComputerScience/%E9%97%A8%E7%94%B5%E8%B7%AF/","title":"\u95e8\u7535\u8def","text":""},{"location":"ComputerScience/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/","title":"\u9ad8\u7ea7\u8bed\u8a00","text":""},{"location":"DataBase/","title":"\u6570\u636e\u5e93","text":""},{"location":"DataStructures/","title":"\u6570\u636e\u7ed3\u6784","text":"<p>\u6570\u636e\u7ed3\u6784\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u662f\u4e00\u95e8\u7efc\u5408\u6027\u7684\u4e13\u4e1a\u57fa\u7840\u8bfe\u3002\u53ef\u4ee5\u8ba4\u4e3a\u6570\u636e\u7ed3\u6784\u662f\u4ecb\u4e8e\u6570\u5b66\u3001\u8ba1\u7b97\u673a\u786c\u4ef6\u548c\u8f6f\u4ef6\u4e09\u8005\u4e4b\u95f4\u7684\u4e00\u95e8\u6838\u5fc3\u8bfe\u7a0b\u3002</p> <pre><code>stateDiagram-v2\n    \u7ebf\u6027\u4ee3\u6570\u6982\u7387\u8bba --&gt; \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\n    \u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00 --&gt; \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\n    \u79bb\u6563\u6570\u5b66(\u96c6\u5408\u8bba\u4e0e\u56fe\u8bba) --&gt; \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\n    \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 --&gt; \u7b97\u6cd5\u5206\u6790\u4e0e\u8bbe\u8ba1\n    \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 --&gt; \u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\n    \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 --&gt; \u6570\u636e\u5e93\uff08\u7ebf\u6027\u8868\u3001\u591a\u94fe\u8868\u3001\u6392\u5e8f\u3001B+\u6811\uff09\n    \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 --&gt; \u64cd\u4f5c\u7cfb\u7edf\uff08\u961f\u5217\u3001\u5b58\u50a8\u7ba1\u7406\u8868\u3001\u6392\u5e8f\u3001\u76ee\u5f55\u6811\uff09\n    \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 --&gt; \u7f16\u8bd1\u539f\u7406\uff08\u5b57\u7b26\u4e32\u3001\u6808\u3001\u54c8\u5e0c\u8868\u3001\u8bed\u6cd5\u6811\uff09</code></pre>"},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/","title":"\u4e32\u3001\u6570\u7ec4\u548c\u5e7f\u4e49\u8868","text":""},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_2","title":"\u4e32\u7684\u5b9a\u4e49","text":"<p>\u4e32\uff08string\uff09\uff08\u6216\u5b57\u7b26\u4e32\uff09\u662f\u7531\u96f6\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u6709\u9650\u5e8f\u5217\u3002\u4e32\u4e2d\u5b57\u7b26\u7684\u6570\u76een\u79f0\u4e3a\u4e32\u7684\u957f\u5ea6\u3002\u96f6\u4e2a\u5b57\u7b26\u7684\u4e32\u79f0\u4e3a\u7a7a\u4e32\uff08null string\uff09\uff0c\u5176\u957f\u5ea6\u4e3a\u96f6\u3002</p> <p>\u4e32\u4e2d\u4efb\u610f\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u5e8f\u5217\u79f0\u4e3a\u8be5\u4e32\u7684\u5b50\u4e32\u3002\u5305\u542b\u5b50\u4e32\u7684\u4e32\u76f8\u5e94\u5730\u79f0\u4e3a\u4e3b\u4e32\u3002\u901a\u5e38\u79f0\u5b57\u7b26\u5728\u5e8f\u5217\u4e2d\u7684\u5e8f\u53f7\u4e3a\u8be5\u5b57\u7b26\u5728\u4e32\u4e2d\u7684\u4f4d\u7f6e\u3002\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u4f4d\u7f6e\u5219\u4ee5\u5b50\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5728\u4e3b\u4e32\u4e2d\u7684\u4f4d\u7f6e\u6765\u8868\u793a\u3002</p> <p>\u79f0\u4e24\u4e2a\u4e32\u662f\u76f8\u7b49\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e24\u4e2a\u4e32\u7684\u503c\u76f8\u7b49\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5f53\u4e24\u4e2a\u4e32\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u5e76\u4e14\u5404\u4e2a\u5bf9\u5e94\u7684\u4f4d\u7f6e\u7684\u5b57\u7b26\u90fd\u76f8\u7b49\u65f6\u624d\u76f8\u7b49\u3002</p> <p>\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u7a7a\u683c\u7ec4\u6210\u7684\u4e32\" \"\u79f0\u4e3a\u7a7a\u683c\u4e32\uff08blank string\uff0c\u8bf7\u6ce8\u610f\uff1a\u6b64\u5904\u4e0d\u662f\u7a7a\u4e32\uff09\uff0c\u5176\u957f\u5ea6\u4e3a\u4e32\u4e2d\u7a7a\u683c\u5b57\u7b26\u7684\u4e2a\u6570\u3002</p> <p>\u7b26\u53f7 \"\\(\\varnothing\\)\" \u6765\u8868\u793a\u201c\u7a7a\u4e32\u201d\u3002\u8fd9\u4e5f\u662f\u7a7a\u96c6\u7684\u7b26\u53f7\u3002</p>"},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_3","title":"\u4e32\u7684\u7c7b\u578b\u5b9a\u4e49\u3001\u5b58\u50a8\u7ed3\u6784\u53ca\u5176\u8fd0\u7b97","text":""},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_4","title":"\u4e32\u7684\u62bd\u8c61\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_5","title":"\u4e32\u7684\u5b58\u50a8\u7ed3\u6784","text":"<p>\u4e0e\u7ebf\u6027\u8868\u7c7b\u4f3c\uff0c\u4e32\u4e5f\u6709\u4e24\u79cd\u57fa\u672c\u5b58\u50a8\u7ed3\u6784\uff1a\u987a\u5e8f\u5b58\u50a8\u548c\u94fe\u5f0f\u5b58\u50a8\u3002\u4f46\u8003\u8651\u5230\u5b58\u50a8\u6548\u7387\u548c\u7b97\u6cd5\u7684\u65b9\u4fbf\u6027\uff0c\u4e32\u591a\u91c7\u7528\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u3002</p> <ol> <li>\u4e32\u7684\u987a\u5e8f\u5b58\u50a8</li> <li>\u4e32\u7684\u94fe\u5f0f\u5b58\u50a8</li> </ol>"},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_6","title":"\u4e32\u7684\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5","text":"<p>\u5b50\u4e32\u7684\u5b9a\u4f4d\u8fd0\u7b97\u901a\u5e38\u79f0\u4e3a\u6a21\u5f0f\u5339\u914d\u6216\u4e32\u5339\u914d\u3002</p> <p>\u4e32\u7684\u6a21\u5f0f\u5339\u914d\u8bbe\u6709\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u548c \\(T\\) \uff0c\u8bbe \\(S\\) \u4e3a\u4e3b\u4e32\uff0c\u4e5f\u79f0\u6b63\u6587\u4e32\uff1b\u8bbe \\(T\\) \u4e3a\u5b50\u4e32\uff0c\u4e5f\u79f0\u4e3a\u6a21\u5f0f\u3002\u5728\u4e3b\u4e32 \\(S\\) \u4e2d\u67e5\u627e\u4e0e\u6a21\u5f0f \\(T\\) \u76f8\u5339\u914d\u7684\u5b50\u4e32\uff0c\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u786e\u5b9a\u76f8\u5339\u914d\u7684\u5b50\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5728\u4e3b\u4e32 \\(S\\) \u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002</p> <ol> <li> <p>BF\uff08Brute-Force\uff09\u7b97\u6cd5\u3002\uff08\u66b4\u529b\u7b97\u6cd5\uff09 <pre><code>/* \u5b57\u7b26\u4e32\u5e8f\u53f7\u4ece1\u5f00\u59cb */\n/* i\u6307\u9488\u56de\u9000\uff1ai = i - j + 2 */\nint index_BF(char* s1, char* s2)\n{\n    int i = 0, j = 0;\n\n    for (i = 0; s1[i] != '\\0'; i += 1)\n    {\n        for (j = 0; s2[j] != '\\0'; j += 1)\n        {\n            if (s1[i + j] != s2[j])\n            {\n                break;\n            }\n        }\n        if (s2[j] == '\\0')\n        {\n            return i + 1;\n        }\n    }\n    return 0;\n}\n</code></pre></p> </li> <li> <p>KMP\u7b97\u6cd5 <pre><code>/* \u8ba1\u7b97next\u6570\u7ec4 */\n/*\n    next\u6570\u7ec4\u7684\u672c\u8d28\u662f\uff1a\u524d\u7f00\u4e0e\u540e\u7f00\u76f8\u540c\u3002\n\n    \u5f53\u524d\u524d\u7f00\u4e0e\u540e\u7f00\u4e0d\u540c\uff0c\u90a3\u5c31\u8bd5\u4e00\u8bd5\u524d\u7f00\u7684\u524d\u7f00\u80fd\u4e0d\u80fd\u5f62\u6210\u65b0\u7684\u76f8\u540c\u524d\u540e\u7f00\u3002\n\n    \u65b9\u6cd5\u662f\uff1a\n    1. \u5982\u679c\u5f53\u524d\u540e\u7f00\u76f8\u540c\uff0c\u5219\u957f\u5ea6\u7ee7\u7eed\u52a01\u3002\n    2. \u5982\u679c\u4e0d\u540c\uff0c\u5219\u7f29\u77ed\u5f53\u524d\u524d\u7f00\u4e3a\u524d\u7f00\u7684\u524d\u7f00\u3002\n\n    \u5f53\u524d\u7684next\u6570\u7ec4\u5b58\u50a8\u7684\u662f\u524d\u7f00\u7684\u957f\u5ea6\u800c\u975e\u8df3\u8f6c\u4f4d\u7f6e\u3002\u5373\uff1alength = next[length - 1]\n*/\nvoid get_next(char* str, int* next)\n{\n    int i = 1;\n    int length = 0;\n\n    next[0] = length;\n    while (str[i] != '\\0')\n    {\n        /* \u76f8\u540c\uff0c\u957f\u5ea6\u52a01 */\n        if (str[i] == str[length])\n        {\n            length += 1;\n            next[i] = length;\n            i += 1;\n            continue;\n        }\n\n        /* \u4e0d\u5339\u914d\u4e14\u957f\u5ea6\u4e3a0\uff0c\u5219\u957f\u5ea6\u4f9d\u7136\u4e3a0 */\n        if (length == 0)\n        {\n            next[i] = 0;\n            i += 1;\n            continue;\n        }\n\n        /* \u4e0d\u540c\u5219\u5f97\u5230\u5f53\u524d\u524d\u7f00\u7684\u524d\u7f00 */\n        length = next[length - 1];\n    }\n    return;\n}\n\n/* KMP\u7b97\u6cd5\u3002\u627e\u5230\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\u8ba1\u7b97\uff09 */\nint index_KMP(char* s1, char* s2)\n{\n    int i = 0, j = 0;\n    int next[SIZE] = { 0 };\n\n    get_next(s2, next);\n\n    while (s1[i] != '\\0')\n    {\n        if (s1[i] == s2[j])\n        {\n            i += 1;\n            j += 1;\n\n            if (s2[j] == '\\0')\n            {\n                return i - j + 1;\n            }\n\n            continue;\n        }\n\n        if (j == 0)\n        {\n            i += 1;\n            continue;\n        }\n\n        j = next[j - 1];\n    }\n\n    return 0;\n}\n</code></pre></p> </li> </ol> <p>\u7b97\u6cd5\u793a\u4f8b</p> <p>next\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u662f\u5176\u4e0b\u4e00\u6b21\u8df3\u8f6c\u7684\u4f4d\u7f6e\u3002\u5373<code>j = next[j]</code>\u3002</p> <p>next\u6570\u7ec4\u7684\u503c\u53ef\u4ee5\u4ece0\u5f00\u59cb\uff0c\u4e5f\u53ef\u4ee5\u4ece-1\u5f00\u59cb\u3002\u672c\u8d28\u4e0a\u90fd\u662f\u4ece\u524d\u7f00\u6570\u91cf\u4e0a\u5f97\u6765\u7684</p> <pre><code>\u524d\u7f00  0 0 1 0 1 2 3\nnext -1 0 0 1 0 1 2    \u5728\u524d\u7f00\u6570\u7ec4\u4e0a\u53f3\u79fb\nnext  0 1 1 2 1 2 3    \u5728\u4e0a\u4e00\u4e2anext\u4e0a+1\n</code></pre> <ul> <li> <p>\u8ba1\u7b97next\u51fd\u6570\u503c <pre><code>void get_next(char* str, int* next)\n{\n    int i = 1, j = 0;\n    next[1] = 0;\n\n    while (str[i] != '\\0')\n    {\n        if (j == 0 || str[i] == str[j])\n        {\n            i += 1;\n            j += 1;\n            next[i] = j;\n        }\n        else\n        {\n            j = next[j];\n        }\n    }\n\n    return;\n}\n</code></pre></p> </li> <li> <p>\u8ba1\u7b97next\u51fd\u6570\u4fee\u6b63\u503c <pre><code>void get_nextval(char* str, int* nextval)\n{\n    int i = 1, j = 0;\n    nextval[1] = 0;\n\n    while (str[i] != '\\0')\n    {\n        if (j == 0 || str[i] == str[j])\n        {\n            i += 1;\n            j += 1;\n            if (str[i] != str[j])\n            {\n                nextval[i] = j;\n            }\n            else\n            {\n                nextval[i] = nextval[j];\n            }\n        }\n        else\n        {\n            j = nextval[j];\n        }\n    }\n\n    return;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_7","title":"\u6570\u7ec4","text":""},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_8","title":"\u6570\u7ec4\u7684\u7c7b\u578b\u5b9a\u4e49","text":"<p>\u6570\u7ec4\u662f\u7531\u7c7b\u578b\u76f8\u540c\u7684\u6570\u636e\u5143\u7d20\u6784\u6210\u7684\u6709\u5e8f\u96c6\u5408\uff0c\u6bcf\u4e2a\u5143\u7d20\u79f0\u4e3a\u6570\u7ec4\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u53d7\\(n(n\\ge1)\\)\u4e2a\u7ebf\u6027\u5173\u7cfb\u7684\u7ea6\u675f\uff0c\u6bcf\u4e2a\u5143\u7d20\u5728n\u4e2a\u7ebf\u6027\u5173\u7cfb\u4e2d\u7684\u5e8f\u53f7\\(i_{1}, \\space i_{2}, \\space ..., \\space i_{n}\\)\u79f0\u4e3a\u8be5\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u8be5\u6570\u636e\u5143\u7d20\u3002\u56e0\u4e3a\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5904\u4e8e\\(n(n\\ge1)\\)\u4e2a\u5173\u7cfb\u4e2d\uff0c\u6545\u79f0\u8be5\u6570\u7ec4\u4e3an\u7ef4\u6570\u7ec4\u3002\u6570\u7ec4\u53ef\u4ee5\u770b\u6210\u662f\u7ebf\u6027\u8868\u7684\u63a8\u5e7f\uff0c\u5176\u7279\u70b9\u662f\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u672c\u8eab\u53ef\u4ee5\u662f\u5177\u6709\u67d0\u79cd\u7ed3\u6784\u7684\u6570\u636e\uff0c\u4f46\u5c5e\u4e8e\u540c\u4e00\u6570\u636e\u7c7b\u578b\u3002</p>"},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_9","title":"\u6570\u7ec4\u7684\u987a\u5e8f\u5b58\u50a8","text":""},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_10","title":"\u7279\u6b8a\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8","text":"<ol> <li>\u5bf9\u79f0\u77e9\u9635</li> <li>\u4e09\u89d2\u77e9\u9635</li> <li>\u5bf9\u89d2\u77e9\u9635</li> <li>\u7a00\u758f\u77e9\u9635</li> </ol>"},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_11","title":"\u5e7f\u4e49\u8868","text":""},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_12","title":"\u5e7f\u4e49\u8868\u7684\u5b9a\u4e49","text":"<p>\u987e\u540d\u601d\u4e49\uff0c\u5e7f\u4e49\u8868\u662f\u7ebf\u6027\u8868\u7684\u63a8\u5e7f\uff0c\u4e5f\u79f0\u4e3a\u5217\u8868\u3002\u5e7f\u6cdb\u5730\u7528\u4e8e\u4eba\u5de5\u667a\u80fd\u7b49\u9886\u57df\u7684\u8868\u5904\u7406\u8bed\u8a00LISP\u8bed\u8a00\uff0c\u628a\u5e7f\u4e49\u8868\u4f5c\u4e3a\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5c31\u8fde\u7a0b\u5e8f\u4e5f\u8868\u793a\u4e3a\u4e00\u7cfb\u5217\u7684\u5e7f\u4e49\u8868\u3002</p>"},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_13","title":"\u5e7f\u4e49\u8868\u7684\u5b58\u50a8\u7ed3\u6784","text":"<ol> <li>\u5934\u5c3e\u94fe\u8868\u7684\u5b58\u50a8\u7ed3\u6784</li> <li>\u62d3\u5c55\u7ebf\u6027\u94fe\u8868\u7684\u5b58\u50a8\u7ed3\u6784</li> </ol>"},{"location":"DataStructures/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/#_14","title":"\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u73b0","text":"<p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li>\u75c5\u6bd2\u611f\u67d3\u68c0\u6d4b <pre><code>void get_nextval(char* str, int* nextval)\n{\n    int i = 1, j = 0;\n    nextval[1] = 0;\n\n    while (str[i] != '\\0')\n    {\n        if (j == 0 || str[i] == str[j])\n        {\n            i += 1;\n            j += 1;\n            if (str[i] == str[j])\n            {\n                nextval[i] = nextval[j];\n            }\n            else\n            {\n                nextval[i] = j;\n            }\n        }\n        else\n        {\n            j = nextval[j];\n        }\n    }\n}\n\nint Index_KMP(char* s1, char* s2, int* next)\n{\n    int i = 1, j = 1;\n\n    get_nextval(s2, next);\n\n    while (s1[i] != '\\0' &amp;&amp; s2[j] != '\\0')\n    {\n        if (j == 0 || s1[i] == s2[j])\n        {\n            i += 1;\n            j += 1;\n        }\n        else\n        {\n            j = next[j];\n        }\n    }\n\n    if (s2[j] == '\\0')\n    {\n        return i - j + 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    /*\n        \u75c5\u6bd2\u662fbaa\u662f\u73af\u5f62\u7684\uff0c\u6240\u4ee5\u5c06\u5176\u62d3\u5c552\u500d\uff0c\u6bcf\u6b21\u622a\u53d6\u539f\u957f\u5ea6\u8fdb\u884c\u5339\u914d\u3002\n    */\n    char s1[] = \"*aaabbbba\";\n    char s2[] = \"*baabaa\";\n    int next[100] = { 0 };\n    int index = 0;\n    char tmp[100] = { '\\0' };\n\n    int i = 0, j = 0, size = 3;\n\n    for (i = strlen(s2) - size; i &gt;= 1; i -= 1)\n    {\n        tmp[0] = '*';\n        tmp[size + 1] = '\\0';\n\n        for (j = 1; j &lt;= size; j += 1)\n        {\n            tmp[j] = s2[i + j - 1];\n            printf(\"%c\", tmp[j]);\n        }\n        printf(\"\\n\");\n\n        index = Index_KMP(s1, tmp, next);\n        printf(\"%d\\n\", index);\n    }\n\n    return 0;\n}\n</code></pre></li> </ul>"},{"location":"DataStructures/%E5%9B%BE/","title":"\u56fe","text":"<p>\u56fe\u7684\u5e94\u7528\u6781\u4e3a\u5e7f\u6cdb\uff0c\u5df2\u6e17\u5165\u5230\u8bf8\u5982\u7269\u7406\u3001\u5316\u5b66\u3001\u7535\u4fe1\u5de5\u7a0b\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\uff0c\u4ee5\u53ca\u6570\u5b66\u7b49\u5176\u4ed6\u5206\u652f\u4e2d\u3002\u5728\u79bb\u6563\u6570\u5b66\u4e2d\uff0c\u56fe\u8bba\u662f\u4e13\u95e8\u7814\u7a76\u56fe\u7684\u6027\u8d28\u7684\u6570\u5b66\u5206\u652f\uff0c\u800c\u5728\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u5219\u5e94\u7528\u56fe\u8bba\u7684\u77e5\u8bc6\u8ba8\u8bba\u5982\u4f55\u5728\u8ba1\u7b97\u673a\u4e0a\u5b9e\u73b0\u56fe\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e3b\u8981\u5b66\u4e60\u56fe\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u4ee5\u53ca\u82e5\u5e72\u56fe\u7684\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002</p>"},{"location":"DataStructures/%E5%9B%BE/#_2","title":"\u56fe\u7684\u5b9a\u4e49\u548c\u57fa\u672c\u672f\u8bed","text":""},{"location":"DataStructures/%E5%9B%BE/#_3","title":"\u56fe\u7684\u5b9a\u4e49","text":""},{"location":"DataStructures/%E5%9B%BE/#_4","title":"\u56fe\u7684\u57fa\u672c\u672f\u8bed","text":"<ol> <li> <p>\u5b50\u56fe\uff1a\u5047\u8bbe\u6709\u4e24\u4e2a\u56fe \\(G = (v, E)\\) \u548c \\(G^{'}=(V^{'}, E^{'})\\) \uff0c\u5982\u679c \\(V^{'} \\subseteq V \u4e14 E^{'} \\subseteq E\\)\uff0c\u5219\u79f0 \\(G^{'}\\) \u4e3a \\(G\\) \u7684\u5b50\u56fe\u3002</p> </li> <li> <p>\u65e0\u5411\u5b8c\u5168\u56fe\u548c\u6709\u5411\u5b8c\u5168\u56fe\uff1a\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u82e5\u5177\u6709 \\(n(n - 1)/2\\) \u6761\u8fb9\uff0c\u5219\u79f0\u4e3a\u65e0\u5411\u5b8c\u5168\u56fe\u3002\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u82e5\u5177\u6709 \\(n(n - 1)\\) \u6761\u5f27\uff0c\u5219\u79f0\u4e3a\u6709\u5411\u5b8c\u5168\u56fe\u3002</p> </li> <li> <p>\u7a00\u758f\u56fe\u548c\u7a20\u5bc6\u56fe\uff1a\u6709\u5f88\u5c11\u6761\u8fb9\u6216\u5f27\uff08\u5982 \\(e &lt; nlog_{2}n\\) \uff09\u7684\u56fe\u79f0\u4e3a\u7a00\u758f\u56fe\uff0c\u53cd\u4e4b\u79f0\u4e3a\u7a20\u5bc6\u56fe\u3002</p> </li> <li> <p>\u6743\u548c\u7f51\uff1a\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6bcf\u6761\u8fb9\u53ef\u4ee5\u6807\u4e0a\u5177\u6709\u67d0\u79cd\u542b\u4e49\u7684\u6570\u503c\uff0c\u8be5\u6570\u503c\u79f0\u4e3a\u8be5\u8fb9\u4e0a\u7684\u6743\u3002\u8fd9\u4e9b\u6743\u53ef\u4ee5\u8868\u793a\u4ece\u4e00\u4e2a\u9876\u70b9\u5230\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb\u6216\u8017\u8d39\u3002\u8fd9\u79cd\u5e26\u6743\u7684\u56fe\u901a\u5e38\u79f0\u4e3a\u7f51\u3002</p> </li> <li> <p>\u90bb\u63a5\u70b9\uff1a\u5bf9\u4e8e\u65e0\u5411\u56fe \\(G\\) \uff0c\u5982\u679c\u56fe\u7684\u8fb9 \\((v, v^{'}) \\subseteq E\\) \uff0c\u5219\u79f0\u9876\u70b9 \\(v\\) \u548c \\(v^{'}\\) \u4e92\u4e3a\u90bb\u63a5\u70b9\uff0c\u5373 \\(v\\) \u548c \\(v^{'}\\) \u76f8\u90bb\u63a5\u3002\u8fb9 \\((v, v^{'})\\) \u4f9d\u9644\u4e8e\u9876\u70b9 \\(v\\) \u548c \\(v^{'}\\) \uff0c\u6216\u8005\u8bf4\u8fb9 \\((v, v^{'})\\) \u4e0e\u9876\u70b9 \\(v\\) \u548c \\(v^{'}\\) \u76f8\u5173\u8054\u3002</p> </li> <li> <p>\u5ea6\u3001\u5165\u5ea6\u548c\u51fa\u5ea6\uff1a\u9876\u70b9 \\(v\\) \u7684\u5ea6\u662f\u6307\u548c \\(v\\) \u76f8\u5173\u8054\u7684\u8fb9\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a \\(TD(v)\\) \u3002\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u9876\u70b9 \\(v\\) \u7684\u5ea6\u5206\u4e3a\u5165\u5ea6\u548c\u51fa\u5ea6\u3002\u5165\u5ea6\u662f\u4ee5\u9876\u70b9 \\(v\\) \u4e3a\u5934\u7684\u5f27\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a \\(ID(v)\\) \uff1b\u51fa\u5ea6\u662f\u4ee5\u9876\u70b9 \\(v\\) \u4e3a\u5c3e\u7684\u5f27\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a \\(OD(v)\\) \u3002\u9876\u70b9 \\(v\\) \u7684\u5ea6\u4e3a \\(TD(v) = ID(v) + OD(v)\\) \u3002\u4e00\u822c\u5730\uff0c\u5982\u679c\u9876\u70b9 \\(v_{i}\\) \u7684\u5ea6\u8bb0\u4e3a \\(TD(v_{i})\\) \uff0c\u90a3\u4e48\u4e00\u4e2a\u6709 \\(n\\) \u4e2a\u9876\u70b9 \\(e\\) \u6761\u8fb9\u7684\u56fe\uff0c\u6ee1\u8db3\u5982\u4e0b\u5173\u7cfb $$ e = \\frac{1}{2} \\sum_{i = 1}^{n}TD(v_{i}) $$ </p> </li> <li> <p>\u8def\u5f84\u548c\u8def\u5f84\u957f\u5ea6\uff1a\u5728\u65e0\u5411\u56fe \\(G\\) \u4e2d\uff0c\u4ece\u9876\u70b9 \\(v\\) \u5230\u9876\u70b9 \\(v^{'}\\) \u7684\u8def\u5f84\u662f\u4e00\u4e2a\u9876\u70b9\u5e8f\u5217\\((v = v_{i, 0}, v_{i, 1}, ... v_{i, m} = v^{'})\\) \uff0c\u5176\u4e2d \\((v_{i, j - 1}, v_{i, j}) \\subseteq E, 1 \\le j \\le m\\) \u3002\u5982\u679c \\(G\\) \u662f\u6709\u5411\u56fe\uff0c\u5219\u8def\u5f84\u4e5f\u662f\u6709\u5411\u7684\uff0c\u9876\u70b9\u5e8f\u5217\u5e94\u6ee1\u8db3 \\(&lt;v_{i, j-1}, v_{i, j}&gt; \\subseteq E, 1 \\le j \\le m\\) \u3002\u8def\u5f84\u957f\u5ea6\u662f\u4e00\u6761\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u8fb9\u6216\u5f27\u7684\u6570\u76ee\u3002</p> </li> <li> <p>\u56de\u8def\u6216\u73af\uff1a\u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u76f8\u540c\u7684\u8def\u5f84\u79f0\u4e3a\u56de\u8def\u6216\u73af\u3002</p> </li> <li> <p>\u7b80\u5355\u8def\u5f84\u3001\u7b80\u5355\u56de\u8def\u6216\u7b80\u5355\u73af\uff1a\u5e8f\u5217\u4e2d\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\u7684\u8def\u5f84\u79f0\u4e3a\u7b80\u5355\u8def\u5f84\u3002\u9664\u4e86\u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u5916\uff0c\u5176\u4f59\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\u7684\u56de\u8def\uff0c\u79f0\u4e3a\u7b80\u5355\u56de\u8def\u6216\u7b80\u5355\u73af\u3002</p> </li> <li> <p>\u8fde\u901a\u3001\u8fde\u901a\u56fe\u548c\u8fde\u901a\u91cf\uff1a\u5728\u65e0\u5411\u56fe \\(G\\) \u4e2d\uff0c\u5982\u679c\u4ece\u9876\u70b9 \\(v\\) \u5230\u9876\u70b9 \\(v_{'}\\) \u6709\u8def\u5f84\uff0c\u5219\u79f0 \\(v\\) \u548c \\(v_{'}\\) \u662f\u8fde\u901a\u7684\u3002\u5982\u679c\u5bf9\u4e8e\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9 \\(v_{i}\u3001v_{j} \\subseteq V\\)\uff0c\\(v_{i}\\) \u548c \\(v_{j}\\) \u90fd\u662f\u8fde\u901a\u7684\uff0c\u5219\u79f0 \\(G\\) \u662f \u8fde\u901a\u56fe\u3002 \u6240\u8c13\u8fde\u901a\u5206\u91cf \uff0c\u6307\u7684\u662f\u65e0\u5411\u56fe\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u3002</p> </li> <li> <p>\u5f3a\u8fde\u901a\u56fe\u548c\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5728\u6709\u5411\u56fe \\(G\\) \u4e2d\uff0c\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 \\(v_{i}\uff0cv_{j} \\subseteq V\\) \uff0c \\(v_{i} \\ne v_{j}\\) \uff0c\u4ece \\(v_{i}\\) \u5230 \\(v_{j}\\) \u548c\u4ece \\(v_{j}\\) \u5230 \\(v_{i}\\) \u90fd\u5b58\u5728\u8def\u5f84\uff0c\u5219\u79f0 \\(G\\) \u662f\u5f3a\u8fde\u901a\u56fe\u3002\u6709\u5411\u56fe\u4e2d\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4f5c\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p> </li> <li> <p>\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\uff1a\u4e00\u4e2a\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff0c\u5b83\u542b\u6709\u56fe\u4e2d\u5168\u90e8\u9876\u70b9\uff0c\u4f46\u53ea\u6709\u8db3\u4ee5\u6784\u6210\u4e00\u68f5\u6811\u7684 \\(n - 1\\) \u6761\u8fb9\uff0c\u8fd9\u6837\u7684\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u3002</p> </li> <li> <p>\u6709\u5411\u6811\u548c\u751f\u6210\u68ee\u6797\uff1a\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u5176\u4f59\u9876\u70b9\u7684\u5165\u5ea6\u5747\u4e3a1\u7684\u6709\u5411\u56fe\u79f0\u4e3a\u6709\u5411\u6811\u3002\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u751f\u6210\u68ee\u6797\u662f\u7531\u82e5\u5e72\u68f5\u6709\u5411\u6811\u7ec4\u6210\uff0c\u542b\u6709\u56fe\u4e2d\u5168\u90e8\u9876\u70b9\uff0c\u4f46\u53ea\u6709\u8db3\u4ee5\u6784\u6210\u82e5\u5e72\u68f5\u4e0d\u76f8\u4ea4\u7684\u6709\u5411\u6811\u7684\u5f27\u3002</p> </li> </ol>"},{"location":"DataStructures/%E5%9B%BE/#_5","title":"\u6848\u4f8b\u5f15\u5165","text":""},{"location":"DataStructures/%E5%9B%BE/#_6","title":"\u56fe\u7684\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"DataStructures/%E5%9B%BE/#_7","title":"\u56fe\u7684\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"DataStructures/%E5%9B%BE/#_8","title":"\u90bb\u63a5\u77e9\u9635","text":""},{"location":"DataStructures/%E5%9B%BE/#_9","title":"\u90bb\u63a5\u8868","text":""},{"location":"DataStructures/%E5%9B%BE/#_10","title":"\u5341\u5b57\u94fe\u8868","text":""},{"location":"DataStructures/%E5%9B%BE/#_11","title":"\u90bb\u63a5\u591a\u91cd\u8868","text":""},{"location":"DataStructures/%E5%9B%BE/#_12","title":"\u56fe\u7684\u904d\u5386","text":""},{"location":"DataStructures/%E5%9B%BE/#_13","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22","text":""},{"location":"DataStructures/%E5%9B%BE/#_14","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","text":""},{"location":"DataStructures/%E5%9B%BE/#_15","title":"\u56fe\u7684\u5e94\u7528","text":""},{"location":"DataStructures/%E5%9B%BE/#_16","title":"\u6700\u5c0f\u751f\u6210\u6811","text":""},{"location":"DataStructures/%E5%9B%BE/#_17","title":"\u6700\u77ed\u8def\u5f84","text":""},{"location":"DataStructures/%E5%9B%BE/#_18","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"DataStructures/%E5%9B%BE/#_19","title":"\u5173\u952e\u8def\u5f84","text":""},{"location":"DataStructures/%E5%9B%BE/#_20","title":"\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u73b0","text":""},{"location":"DataStructures/%E6%8E%92%E5%BA%8F/","title":"\u6392\u5e8f","text":""},{"location":"DataStructures/%E6%9F%A5%E6%89%BE/","title":"\u67e5\u627e","text":""},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/","title":"\u6808\u548c\u961f\u5217","text":""},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_2","title":"\u6808\u548c\u961f\u5217\u7684\u5b9a\u4e49\u548c\u7279\u70b9","text":"<p>\u6808\uff08stack\uff09\u662f\u9650\u5b9a\u4ec5\u5728\u8868\u5c3e\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u7ebf\u6027\u8868\u3002\u56e0\u6b64\uff0c\u5bf9\u6808\u6765\u8bf4\uff0c\u8868\u5c3e\u7aef\u6709\u5176\u7279\u6b8a\u542b\u4e49\uff0c\u79f0\u4e3a\u6808\u9876\uff08top\uff09\uff0c\u76f8\u5e94\u5730\uff0c\u8868\u5934\u7aef\u79f0\u4e3a\u6808\u5e95\uff08bottom\uff09\u3002\u4e0d\u542b\u5143\u7d20\u7684\u7a7a\u8868\u79f0\u4e3a\u7a7a\u6808\u3002\u6808\u53c8\u79f0\u4e3a\u540e\u8fdb\u5148\u51fa\uff08Last In First Out\uff0cLIFO\uff09\u7684\u7ebf\u6027\u8868\u3002</p> <p>\u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08First In First Out\uff0cFIFO\uff09\u7684\u7ebf\u6027\u8868\u3002\u5b83\u53ea\u5141\u8bb8\u5728\u8868\u7684\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\uff0c\u800c\u5728\u53e6\u4e00\u7aef\u5220\u9664\u5143\u7d20\u3002\u5728\u961f\u5217\u4e2d\uff0c\u5141\u8bb8\u63d2\u5165\u7684\u4e00\u6bb5\u79f0\u4e3a\u961f\u5c3e\uff08rear\uff09\uff0c\u5141\u8bb8\u5220\u9664\u7684\u4e00\u7aef\u5219\u79f0\u4e3a\u961f\u5934\uff08front\uff09\u3002</p>"},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_3","title":"\u6808\u7684\u8868\u793a\u548c\u64cd\u4f5c\u7684\u5b9e\u73b0","text":""},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_4","title":"\u987a\u5e8f\u6808\u7684\u8868\u793a\u548c\u5b9e\u73b0","text":"<p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u987a\u5e8f\u6808\u7684\u521d\u59cb\u5316 <pre><code>#define OK 1\n#define ERROR 0\n#define OVERFLOW -2\n#define MAXSIZE 1000\n\ntypedef int Status;\n\ntypedef struct stack\n{\n    int* bottom;\n    int* top;\n    int stack_size;\n}Sqstack;\n\n/* \u987a\u5e8f\u6808\u521d\u59cb\u5316 */\nStatus InitStack(Sqstack* stack)\n{\n    stack-&gt;bottom = malloc(sizeof(int) * MAXSIZE);\n    if (stack-&gt;bottom == NULL)\n    {\n        return ERROR;\n    }\n    stack-&gt;top = stack-&gt;bottom;\n    stack-&gt;stack_size = MAXSIZE;\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u987a\u5e8f\u6808\u7684\u5165\u6808 <pre><code>/* \u987a\u5e8f\u6808\u5165\u6808 */\nStatus Push(Sqstack* stack, int e)\n{\n    if (stack-&gt;top - stack-&gt;bottom == stack-&gt;stack_size)\n    {\n        return ERROR;\n    }\n\n    *(stack-&gt;top) = e; // \u5148\u8d4b\u503c\n    stack-&gt;top += 1; // \u518d++\n\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u987a\u5e8f\u6808\u7684\u51fa\u6808 <pre><code>/* \u987a\u5e8f\u6808\u51fa\u6808 */\nStatus Pop(Sqstack* stack, int* e)\n{\n    if (stack-&gt;top == stack-&gt;bottom)\n    {\n        return ERROR;\n    }\n\n    stack-&gt;top -= 1; // \u5148--\n    *e = *(stack-&gt;top); // \u518d\u8d4b\u503c\n\n    return OK;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_5","title":"\u94fe\u6808\u7684\u8868\u793a\u548c\u5b9e\u73b0","text":"<p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u94fe\u6808\u7684\u521d\u59cb\u5316 <pre><code>#define OK 1\n#define ERROR 0\n#define OVERFLOW -2\n\ntypedef int Status;\n\ntypedef struct StackNode\n{\n    int data;\n    struct StackNode* next;\n}StackNode, * LinkStack;\n\n/* \u94fe\u6808\u521d\u59cb\u5316 */\nStatus InitStack(LinkStack* stack)\n{\n    *stack = NULL;\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u94fe\u6808\u7684\u5165\u6808 <pre><code>/* \u94fe\u6808\u7684\u5165\u6808 */\nStatus Push(LinkStack* stack, int e)\n{\n    StackNode* node = malloc(sizeof(StackNode));\n    node-&gt;data = e;\n    node-&gt;next = (*stack);\n\n    *stack = node;\n\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u94fe\u6808\u7684\u51fa\u6808 <pre><code>/* \u94fe\u6808\u7684\u51fa\u6808 */\nStatus Pop(LinkStack* stack, int* e)\n{\n    if ((*stack) == NULL)\n    {\n        return ERROR;\n    }\n\n    StackNode* node = *stack;\n    *e = node-&gt;data;\n\n    *stack = node-&gt;next;\n    free(node);\n\n    return OK;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_6","title":"\u6808\u4e0e\u9012\u5f52","text":"<p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u904d\u5386\u8f93\u51fa\u94fe\u8868\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u9012\u5f52\u7b97\u6cd5 <pre><code>void TraverseList(LinkList p)\n{\n    if (p == NULL)\n    {\n        return;\n    }\n    printf(\"%d\\n\", p-&gt;data);\n    TraverseList(p-&gt;next);\n}\n</code></pre></p> </li> <li> <p>Hanoi\u5854\u95ee\u9898\u7684\u9012\u5f52\u7b97\u6cd5 <pre><code>/* A -&gt; C, \u7ecf\u8fc7B */\nvoid Hanoi(int n, char A, char B, char C)\n{\n    if (n == 1)\n    {\n        printf(\"%c -&gt; %c\\n\", A, C);\n        return;\n    }\n\n    Hanoi(n - 1, A, C, B);\n    printf(\"%c -&gt; %c\\n\", A, C);\n    Hanoi(n - 1, B, A, C);\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_7","title":"\u9012\u5f52\u7b97\u6cd5\u7684\u6548\u7387\u5206\u6790","text":"<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790</li> </ul>"},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_8","title":"\u961f\u5217\u7684\u8868\u793a\u548c\u64cd\u4f5c\u5b9e\u73b0","text":""},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_9","title":"\u961f\u5217\u7684\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#-","title":"\u5faa\u73af\u961f\u5217 - \u961f\u5217\u7684\u987a\u5e8f\u8868\u793a\u548c\u5b9e\u73b0","text":"<p>\u5faa\u73af\u961f\u5217\u5b9e\u73b0\u65f6\uff1a</p> <ul> <li>\u961f\u7a7a\u6761\u4ef6\uff1a<code>q-&gt;front == q-&gt;rear</code></li> <li>\u961f\u6ee1\u6761\u4ef6\uff1a<code>(q-&gt;rear + 1) % MAXQSIZE == q.front</code></li> </ul> <p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li>\u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316 <pre><code>/* \u72b6\u6001 */\n#define OK 1\n#define ERROR 0\n#define OVERFLOW -2\n#define MAXQSIZE 100\n\ntypedef int Status;\n\ntypedef struct\n{\n    int* base;\n    int front;\n    int rear;\n\n}SqQueue;\n\n/* \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316 */\nStatus InitQueue(SqQueue* q)\n{\n    q-&gt;base = malloc(sizeof(int) * MAXQSIZE);\n    if (q-&gt;base == NULL)\n    {\n        return OVERFLOW;\n    }\n    q-&gt;front = 0;\n    q-&gt;rear = 0;\n    return OK;\n}\n</code></pre></li> <li> <p>\u6c42\u5faa\u73af\u961f\u5217\u7684\u957f\u5ea6 <pre><code>/* \u6c42\u961f\u5217\u957f\u5ea6 */\nint QueueLength(SqQueue* q)\n{\n    return (q-&gt;rear - q-&gt;front + MAXQSIZE) % MAXQSIZE;\n}\n</code></pre></p> </li> <li> <p>\u5faa\u73af\u961f\u5217\u7684\u5165\u961f <pre><code>/* \u5faa\u73af\u961f\u5217\u5165\u961f */\nStatus EnQueue(SqQueue* q, int e)\n{\n    if ((q-&gt;rear + 1) % MAXQSIZE == q-&gt;front)\n    {\n        return ERROR;\n    }\n    *(q-&gt;base + q-&gt;rear) = e;\n    q-&gt;rear = (q-&gt;rear + 1) % MAXQSIZE;\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u5faa\u73af\u961f\u5217\u7684\u51fa\u961f <pre><code>/* \u5faa\u73af\u961f\u5217\u51fa\u961f */\nStatus DeQueue(SqQueue* q, int* e)\n{\n    if (q-&gt;front == q-&gt;rear)\n    {\n        return ERROR;\n    }\n\n    *e = *(q-&gt;base + q-&gt;front);\n    q-&gt;front = (q-&gt;front + 1) % MAXQSIZE;\n    return OK;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#-_1","title":"\u94fe\u961f - \u961f\u5217\u7684\u94fe\u5f0f\u8868\u793a\u548c\u5b9e\u73b0","text":"<ul> <li>\u5f53\u524d\u4e3a\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u961f\u3002\u5f53\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u51fa\u961f\u65f6\uff0c\u8981\u5c06<code>q-&gt;rear</code>\u6307\u56de\u5934\u7ed3\u70b9\uff0c\u5934\u7ed3\u70b9<code>next</code>\u91cd\u65b0\u4fee\u6539\u4e3a<code>NULL</code>\u3002</li> </ul> <p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u94fe\u961f\u7684\u521d\u59cb\u5316 <pre><code>/* \u72b6\u6001 */\n#define OK 1\n#define ERROR 0\n#define OVERFLOW -2\n\ntypedef int Status;\n\ntypedef struct QNode\n{\n    int data;\n    struct QNode* next;\n}QNode, *QNodeLink;\n\ntypedef struct\n{\n    QNodeLink front;\n    QNodeLink rear;\n}LinkQueue;\n\n/* \u521b\u5efa\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u961f */\nStatus InitQueue(LinkQueue* q)\n{\n    /* \u6b64node\u4e3a\u5934\u7ed3\u70b9 */\n    QNodeLink node = malloc(sizeof(QNode));\n    if (node == NULL)\n    {\n        return ERROR;\n    }\n    node-&gt;next = NULL;\n\n    q-&gt;front = node;\n    q-&gt;rear = node;\n\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u94fe\u961f\u7684\u5165\u961f <pre><code>/* \u5165\u961f */\nStatus EnQueue(LinkQueue* q, int e)\n{\n    QNodeLink node = malloc(sizeof(QNode));\n    node-&gt;data = e;\n    node-&gt;next = NULL;\n\n    q-&gt;rear-&gt;next = node;\n    q-&gt;rear = node;\n\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u94fe\u961f\u7684\u51fa\u961f <pre><code>/* \u51fa\u961f */\nStatus DeQueue(LinkQueue* q, int* e)\n{\n    QNodeLink node = NULL;\n\n    if (q-&gt;front == q-&gt;rear)\n    {\n        return ERROR;\n    }\n\n    node = q-&gt;front-&gt;next;\n    *e = node-&gt;data;\n\n    q-&gt;front-&gt;next = node-&gt;next;\n\n    if (node == q-&gt;rear)\n    {\n        q-&gt;rear = q-&gt;front;\n        q-&gt;rear-&gt;next = NULL;\n    }\n    free(node);\n\n    return OK;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_10","title":"\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u73b0","text":"<p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u6570\u5236\u7684\u8f6c\u6362 <pre><code>/* \u5229\u7528\u6808\u8fdb\u884c\u5341\u8fdb\u5236\u8f6c\u516b\u8fdb\u5236 */\nvoid conversion(int n)\n{\n    Sqstack s;\n    int e = 0;\n\n    InitStack(&amp;s);\n\n    while (n != 0)\n    {\n        Push(&amp;s, n % 8);\n        n /= 8;\n    }\n\n    while (Pop(&amp;s, &amp;e))\n    {\n        printf(\"%d\", e);\n    }\n    return;\n}\n</code></pre></p> </li> <li> <p>\u62ec\u53f7\u7684\u5339\u914d <pre><code>/* \u62ec\u53f7\u5339\u914d\u3002\u5168\u90e8\u5339\u914d\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse */\n/*\n    [  (  [  ]  [  ]  )  ]\n    1  2  3  4  5  6  7  8\n*/\nbool Matching(char* str, int size)\n{\n    Sqstack s;\n    int c = 0, i = 0;\n    bool flag = false;\n\n    InitStack(&amp;s);\n\n    for (i = 0; i &lt; size; i += 1)\n    {\n        if (str[i] == '[' || str[i] == '(')\n        {\n            Push(&amp;s, str[i]);\n        }\n        else\n        {\n            GetTop(&amp;s, &amp;c);\n            if (str[i] == ']' &amp;&amp; c == '[')\n            {\n                Pop(&amp;s, &amp;c);\n            }\n            else if (str[i] == ')' || c == '(')\n            {\n                Pop(&amp;s, &amp;c);\n            }\n            else\n            {\n                Push(&amp;s, str[i]);\n            }\n            c = 0;\n        }\n    }\n\n    if (s.top == s.bottom)\n    {\n        flag = true;\n    }\n\n    free(s.bottom);\n\n    return flag;\n}\n</code></pre></p> </li> <li> <p>\u8868\u8fbe\u5f0f\u6c42\u503c <pre><code>/* \u8ba1\u7b97\u5305\u542b\u6570\u5b57\u3001\u64cd\u4f5c\u7b26\uff08+\u3001-\u3001*\u3001/\u3001\u62ec\u53f7\uff09\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u3002\u5229\u7528\u987a\u5e8f\u6808\u5b9e\u73b0\u3002 */\n\n/* \u5408\u5e76\u6570\u5b57 */\nint GetNumber(int* num, int size)\n{\n    int number = 0;\n    int i = 0;\n\n    number = 0;\n    for (i = 0; i &lt; size; i += 1)\n    {\n        number += num[i] * pow(10, size - i - 1);\n    }\n    return number;\n}\n\n/* \u8ba1\u7b97 */\nint Calculate(int a, int b, char optr)\n{\n    if (optr == '+')\n    {\n        return a + b;\n    }\n    if (optr == '-')\n    {\n        return a - b;\n    }\n    if (optr == '*')\n    {\n        return a * b;\n    }\n    if (optr == '/')\n    {\n        return a / b;\n    }\n}\n\n/* \u83b7\u53d6\u64cd\u4f5c\u7b26\u4e0b\u6807 */\nint GetOperatorIndex(char c)\n{\n    char opt[8] = { '+', '-', ',', '*', '/', ',', '(', ')' };\n    int i = 0;\n\n    for (i = 0; i &lt; 8; i += 1)\n    {\n        if (opt[i] == c)\n        {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n/* \u6bd4\u8f83\u4f18\u5148\u7ea7 */\nchar Precode(char left, char right)\n{\n    int a = GetOperatorIndex(left);\n    int b = GetOperatorIndex(right);\n\n    if (left == '(' &amp;&amp; right == ')')\n    {\n        return '=';\n    }\n\n    if (left == '(' &amp;&amp; right != ')')\n    {\n        return '&lt;';\n    }\n\n    if (left != '(' &amp;&amp; right == ')')\n    {\n        return '&gt;';\n    }\n\n    if (abs(a - b) == 1 || a == b)\n    {\n        return '&gt;';\n    }\n\n    if (a &gt; b)\n    {\n        return '&gt;';\n    }\n\n    return '&lt;';\n}\n\n/* \u6570\u5b57\u68c0\u67e5 */\nvoid CheckNumberAndPush(Sqstack* OPTR, Sqstack* OPND, int n)\n{\n    int optr = '\\0';\n\n    if (IsEmpty(OPTR))\n    {\n        Push(OPND, n);\n        return;\n    }\n\n    /* \u5c06\u5de6\u4fa7\u4e3a\u8d1f\u53f7\u7684\u6570\u5b57\u8f6c\u4e3a\u6b63\u53f7\u4ee5\u53ca\u76f8\u53cd\u6570 */\n    GetTop(OPTR, &amp;optr);\n    if (n &lt; 0 &amp;&amp; optr == '-')\n    {\n        Pop(OPTR, &amp;optr);\n        Push(OPTR, '+');\n        n *= -1;\n    }\n    else if (n &gt; 0 &amp;&amp; optr == '-')\n    {\n        Pop(OPTR, &amp;optr);\n        Push(OPTR, '+');\n        n *= -1;\n    }\n    Push(OPND, n);\n    return;\n}\n\n\n/* \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c */\n/*\n    6-10+8*12-100+2                     -6\n    1996/2*3+5-27                       2972\n    (2+3)*5                             25\n    3+5*2-(5+1-10)*7-((4-2)+3)          36\n    3+2+(5-3)*6-12*5+(5+(4+3))          -31\n    1+2-3-100*2+36-(4+2)-9*9            -251\n    (1+(2-3)-100)*2+36-(4+2)-9*9        -251\n*/\nint EvaluateExpression(char* str, int size)\n{\n    Sqstack OPND, OPTR;\n    int i = 0;\n    int optr = '\\0';\n    char res = '\\0';\n    int a = 0, b = 0;\n    int ans = 0;\n\n    int num[100] = { 0 };\n    int num_cnt = 0;\n    int number = 0;\n\n    InitStack(&amp;OPND);\n    InitStack(&amp;OPTR);\n\n    for (i = 0; i &lt; size; i += 1)\n    {\n        /* \u6570\u5b57 */\n        if (GetOperatorIndex(str[i]) == -1)\n        {\n            num[num_cnt] = str[i] - '0';\n            num_cnt += 1;\n            continue;\n        }\n\n        /* \u6570\u5b57\u5408\u5e76 */\n        if (num_cnt != 0)\n        {\n            number = GetNumber(num, num_cnt);\n            CheckNumberAndPush(&amp;OPTR, &amp;OPND, number);\n            num_cnt = 0;\n        }\n\n        /* \u7b2c\u4e00\u4e2a\u64cd\u4f5c\u7b26 */\n        if (IsEmpty(&amp;OPTR))\n        {\n            Push(&amp;OPTR, str[i]);\n            continue;\n        }\n\n        GetTop(&amp;OPTR, &amp;optr);\n        res = Precode(optr, str[i]);\n\n        if (res == '&lt;')\n        {\n            Push(&amp;OPTR, str[i]);\n            continue;\n        }\n\n        if (res == '&gt;')\n        {\n            Pop(&amp;OPND, &amp;b);\n            Pop(&amp;OPND, &amp;a);\n            Pop(&amp;OPTR, &amp;optr);\n            CheckNumberAndPush(&amp;OPTR, &amp;OPND, Calculate(a, b, optr));\n        }\n\n        GetTop(&amp;OPTR, &amp;optr);\n        res = Precode(optr, str[i]);\n        if (res == '=')\n        {\n            Pop(&amp;OPTR, &amp;optr);\n            continue;\n        }\n        Push(&amp;OPTR, str[i]);\n    }\n\n    /* \u6700\u540e\u4e00\u4e2a\u6570\u5b57 */\n    if (num_cnt != 0)\n    {\n        number = GetNumber(num, num_cnt);\n        CheckNumberAndPush(&amp;OPTR, &amp;OPND, number);\n        num_cnt = 0;\n    }\n\n    /* \u5f39\u6808\u8ba1\u7b97 */\n    while (IsEmpty(&amp;OPTR) == false)\n    {\n        Pop(&amp;OPND, &amp;b);\n        Pop(&amp;OPND, &amp;a);\n        Pop(&amp;OPTR, &amp;optr);\n\n        CheckNumberAndPush(&amp;OPTR, &amp;OPND, Calculate(a, b, optr));\n    }\n\n    Pop(&amp;OPND, &amp;ans);\n\n    return ans;\n}\n\nint main(void)\n{\n    //char str[] = \"6-10+8*12-100+2\";\n    //char str[] = \"1996/2*3+5-27\";\n    //char str[] = \"(2+3)*5\";\n    //char str[] = \"3+5*2-(5+1-10)*7-((4-2)+3)\";\n    //char str[] = \"3+2+(5-3)*6-12*5+(5+(4+3))\";\n    char str[] = \"(1+(2-3)-100)*2+36-(4+2)-9*9\";\n\n    int ans = 0;\n\n    ans = EvaluateExpression(str, sizeof(str) - 1);\n    printf(\"%s = %d\\n\", str, ans);\n\n    return 0;\n}\n</code></pre></p> </li> <li> <p>\u821e\u4f34\u95ee\u9898 <pre><code>/* \u7528\u5faa\u73af\u961f\u5217\u7b80\u5355\u5b9e\u73b0 */\n\n/* \u72b6\u6001 */\n#define OK 1\n#define ERROR 0\n#define OVERFLOW -2\n#define MAXQSIZE 100\n#define SIZE 50\ntypedef int Status;\n\ntypedef struct data\n{\n    char name[SIZE];\n} DataType;\n\ntypedef struct\n{\n    DataType* base;\n    int front;\n    int rear;\n\n}SqQueue;\n\n/* \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316 */\nStatus InitQueue(SqQueue* q)\n{\n    q-&gt;base = malloc(sizeof(DataType) * MAXQSIZE);\n    if (q-&gt;base == NULL)\n    {\n        return OVERFLOW;\n    }\n    q-&gt;front = 0;\n    q-&gt;rear = 0;\n    return OK;\n}\n\n/* \u5faa\u73af\u961f\u5217\u5165\u961f */\nStatus EnQueue(SqQueue* q, DataType e)\n{\n    if ((q-&gt;rear + 1) % MAXQSIZE == q-&gt;front)\n    {\n        return ERROR;\n    }\n    *(q-&gt;base + q-&gt;rear) = e;\n    q-&gt;rear = (q-&gt;rear + 1) % MAXQSIZE;\n    return OK;\n}\n\n/* \u5faa\u73af\u961f\u5217\u51fa\u961f */\nStatus DeQueue(SqQueue* q, DataType* e)\n{\n    if (q-&gt;front == q-&gt;rear)\n    {\n        return ERROR;\n    }\n\n    *e = *(q-&gt;base + q-&gt;front);\n    q-&gt;front = (q-&gt;front + 1) % MAXQSIZE;\n    return OK;\n}\n\nvoid DancePartner(SqQueue* Mdancers, SqQueue* Fdancers)\n{\n    DataType Mda, Fda;\n    for (int i = 0; i &lt; 30; i += 1)\n    {\n        DeQueue(Mdancers, &amp;Mda);\n        DeQueue(Fdancers, &amp;Fda);\n        printf(\"\u7b2c%d\u7ec4\uff1a%s \u548c %s.\\t\", i + 1, Mda.name, Fda.name);\n        EnQueue(Mdancers, Mda);\n        EnQueue(Fdancers, Fda);\n    }\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u6811\u548c\u4e8c\u53c9\u6811","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","title":"\u6811\u548c\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","title":"\u6811\u7684\u5b9a\u4e49","text":"<p>\u6811\uff08Tree\uff09\u662f \\(n\uff08n \\ge 0\uff09\\) \u4e2a\u7ed3\u70b9\u7684\u6709\u9650\u96c6\uff0c\u5b83\u6216\u4e3a\u7a7a\u6811\uff08\\(n = 0\\)\uff09\uff1b\u6216\u4e3a\u975e\u7a7a\u6811\uff0c\u5bf9\u4e8e\u975e\u7a7a\u6811\\(T\\)\uff1a</p> <ol> <li>\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u6839\u7684\u7ed3\u70b9\u3002</li> <li>\u9664\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u5176\u4f59\u7ed3\u70b9\u53ef\u5206\u4e3a\\(m\uff08m \\ge 0\uff09\\)\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u6709\u9650\u96c6\\(T_{1}\uff0c T_{2}\uff0c ...\uff0cT_{m}\\)\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u96c6\u5408\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u6811\uff0c\u5e76\u4e14\u79f0\u4e3a\u6839\u7684\u5b50\u6811\uff08SubTree\uff09\u3002</li> </ol>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","title":"\u6811\u7684\u57fa\u672c\u672f\u8bed","text":"<ol> <li>\u7ed3\u70b9\uff1a\u6811\u79cd\u7684\u4e00\u4e2a\u72ec\u7acb\u5355\u5143\u3002</li> <li>\u7ed3\u70b9\u7684\u5ea6\uff1a\u7ed3\u70b9\u62e5\u6709\u7684\u5b50\u6811\u6570\u79f0\u4e3a\u7ed3\u70b9\u7684\u5ea6\u3002</li> <li>\u6811\u7684\u5ea6\uff1a\u6570\u7684\u5ea6\u662f\u6811\u5185\u5404\u7ed3\u70b9\u5ea6\u7684\u6700\u5927\u503c\u3002</li> <li>\u53f6\u5b50\uff1a\u5ea6\u4e3a0\u7684\u7ed3\u70b9\u79f0\u4e3a\u53f6\u5b50\u6216\u7ec8\u7aef\u7ed3\u70b9\u3002</li> <li>\u975e\u7ec8\u7aef\u7ed3\u70b9\uff1a\u5ea6\u4e0d\u4e3a0\u7684\u7ed3\u70b9\u79f0\u4e3a\u975e\u7ec8\u7aef\u7ed3\u70b9\u6216\u5206\u652f\u7ed3\u70b9\u3002</li> <li>\u53cc\u4eb2\u548c\u5b69\u5b50\uff1a\u7ed3\u70b9\u7684\u5b50\u6811\u7684\u6839\u79f0\u4e3a\u8be5\u7ed3\u70b9\u7684\u5b69\u5b50\uff0c\u76f8\u5e94\u5730\uff0c\u8be5\u7ed3\u70b9\u79f0\u4e3a\u5b69\u5b50\u7684\u53cc\u4eb2\u3002</li> <li>\u5144\u5f1f\uff1a\u540c\u4e00\u4e2a\u53cc\u4eb2\u7684\u5b69\u5b50\u4e4b\u95f4\u4e92\u79f0\u5144\u5f1f\u3002</li> <li>\u7956\u5148\uff1a\u4ece\u6839\u5230\u8be5\u7ed3\u70b9\u6240\u7ecf\u5206\u652f\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\u3002</li> <li>\u5b50\u5b59\uff1a\u4ee5\u67d0\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u4efb\u4e00\u7ed3\u70b9\u90fd\u79f0\u4e3a\u8be5\u7ed3\u70b9\u7684\u5b50\u5b59\u3002</li> <li>\u5c42\u6b21\uff1a\u7ed3\u70b9\u7684\u5c42\u6b21\u4ece\u6839\u5f00\u59cb\u5b9a\u4e49\u8d77\uff0c\u6839\u4e3a\u7b2c\u4e00\u5c42\uff0c\u6839\u7684\u5b69\u5b50\u4e3a\u7b2c\u4e8c\u5c42\u3002</li> <li>\u5802\u5144\u5f1f\uff1a\u53cc\u4eb2\u5728\u540c\u4e00\u5c42\u7684\u7ed3\u70b9\u4e92\u4e3a\u5802\u5144\u5f1f\u3002</li> <li>\u6811\u7684\u6df1\u5ea6\uff1a\u6811\u4e2d\u7ed3\u70b9\u7684\u6700\u5927\u5c42\u6b21\u79f0\u4e3a\u6811\u7684\u6df1\u5ea6\u6216\u9ad8\u5ea6\u3002</li> <li>\u6709\u5e8f\u6811\u548c\u65e0\u5e8f\u6811\uff1a\u5982\u679c\u5c06\u6811\u4e2d\u7ed3\u70b9\u7684\u5404\u5b50\u6811\u770b\u6210\u4ece\u5de6\u81f3\u53f3\u662f\u6709\u6b21\u5e8f\u7684\uff08\u5373\u4e0d\u80fd\u4e92\u6362\uff09\uff0c\u5373\u79f0\u8be5\u6811\u4e3a\u6709\u5e8f\u6811\uff0c\u5426\u5219\u79f0\u4e3a\u65e0\u987b\u6811\u3002</li> <li>\u68ee\u6797\uff1a\u662f\\(m ( m \\ge 0 )\\)\u68f5\u4e92\u4e0d\u76f8\u4ea4\u7684\u6811\u7684\u96c6\u5408\u3002</li> </ol>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","title":"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":"<p>\u4e8c\u53c9\u6811\uff08Binary Tree\uff09\u662f\\(n\uff08n \\ge 0\uff09\\) \u4e2a\u7ed3\u70b9\u6240\u6784\u6210\u7684\u96c6\u5408\uff0c\u5b83\u6216\u4e3a\u7a7a\u6811\uff08\\(n = 0\\)\uff09\uff1b\u6216\u4e3a\u975e\u7a7a\u6811\uff0c\u5bf9\u4e8e\u975e\u7a7a\u6811\\(T\\)\uff1a</p> <ol> <li>\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u6839\u7684\u7ed3\u70b9\uff1b</li> <li>\u9664\u6839\u7ed3\u70b9\u4ee5\u5916\u7684\u5176\u4f59\u7ed3\u70b9\u5206\u4e3a\u4e24\u4e2a\u4e92\u8865\u76f8\u4ea4\u7684\u5b50\u96c6\\(T_{1}\\)\u548c\\(T_{2}\\)\uff0c\u5206\u522b\u79f0\u4e3a\\(T\\)\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u4e14\\(T_{1}\\)\u548c\\(T_{2}\\)\u672c\u8eab\u53c8\u90fd\u662f\u4e8c\u53c9\u6811\u3002</li> </ol> <p>\u4e8c\u53c9\u6811\u4e0e\u6811\u4e00\u6837\u5177\u6709\u9012\u5f52\u6027\u8d28\uff0c\u4e8c\u53c9\u6811\u4e0e\u6811\u7684\u533a\u522b\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u70b9\uff1a</p> <ol> <li>\u4e8c\u53c9\u6811\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u591a\u53ea\u6709\u4e24\u9897\u5b50\u6811\uff08\u5373\u4e8c\u53c9\u6811\u4e2d\u4e0d\u5b58\u5728\u5ea6\u5927\u4e8e2\u7684\u7ed3\u70b9\uff09\uff1b</li> <li>\u4e8c\u53c9\u6811\u7684\u5b50\u6811\u6709\u5de6\u53f3\u4e4b\u5206\uff0c\u5176\u6b21\u5e8f\u4e0d\u80fd\u4efb\u610f\u98a0\u5012\u3002</li> </ol>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_6","title":"\u6811\u548c\u4e8c\u53c9\u6811\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_7","title":"\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u548c\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_8","title":"\u4e8c\u53c9\u6811\u7684\u6027\u8d28","text":"<p>\u4e8c\u53c9\u6811\u5177\u6709\u4e0b\u5217\u91cd\u8981\u7279\u6027\uff1a</p> <p>\u6027\u8d281 \u5728\u4e8c\u53c9\u6811\u7684\u7b2c \\(i\\) \u5c42\u4e0a\u81f3\u591a\u6709 \\(2^{i-1}\\) \u4e2a\u7ed3\u70b9\uff08 \\(i \\ge 1\\) \uff09</p> <p>\u6027\u8d282 \u6df1\u5ea6\u4e3a \\(k\\) \u7684\u4e8c\u53c9\u6811\u81f3\u591a\u6709 \\(2^{k}-1\\) \u4e2a\u7ed3\u70b9\uff08 \\(k \\ge 1\\) \uff09</p> <p>\u6027\u8d283 \u5bf9\u4efb\u4f55\u4e00\u68f5\u4e8c\u53c9\u6811 \\(T\\) \uff0c\u5982\u679c\u5176\u7ec8\u7aef\u7ed3\u70b9\u6570\u4e3a \\(n_{0}\\) \uff0c\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u6570\u4e3a \\(n_{2}\\) \uff0c\u5219 \\(n_{0}=n_{2}+1\\) \u3002</p> <p>\u6ee1\u4e8c\u53c9\u6811 \u6df1\u5ea6\u4e3a \\(k\\) \u4e14\u542b\u6709 \\(2^{k}-1\\) \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u3002</p> <p>\u6ee1\u4e8c\u53c9\u6811\u7684\u7279\u70b9\u662f\uff1a\u7b2c\u4e00\u5c42\u4e0a\u7684\u7ed3\u70b9\u6570\u90fd\u662f\u6700\u5927\u7ed3\u70b9\u6570\uff0c\u5373\u6bcf\u4e00\u5c42 \\(i\\) \u7684\u7ed3\u70b9\u6570\u90fd\u5177\u6709\u6700\u5927\u503c \\(2^{i-1}\\) \u3002</p> <p>\u5b8c\u5168\u4e8c\u53c9\u6811 \u6df1\u5ea6\u4e3a \\(k\\) \u7684\uff0c\u6709 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u4e0e\u6df1\u5ea6 \\(k\\) \u7684\u6ee1\u4e8c\u53c9\u6811\u4e2d\u7f16\u53f7\u4ece \\(1\\) \u81f3 \\(n\\) \u7684\u7ed3\u70b9\u4e00\u4e00\u5bf9\u5e94\u65f6\uff0c\u79f0\u4e4b\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u3002</p> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7279\u70b9\u662f\uff1a</p> <ol> <li>\u53f6\u5b50\u7ed3\u70b9\u53ea\u53ef\u80fd\u5728\u5c42\u6b21\u6700\u5927\u7684\u4e24\u5c42\u4e0a\u51fa\u73b0\uff1b</li> <li>\u5bf9\u4efb\u4e00\u7ed3\u70b9\uff0c\u82e5\u5176\u53f3\u5206\u652f\u4e0b\u7684\u5b50\u5b59\u7684\u6700\u5927\u5c42\u6b21\u4e3a \\(l\\) \uff0c\u5219\u5176\u5de6\u5206\u652f\u4e0b\u7684\u5b50\u5b59\u7684\u6700\u5927\u5c42\u6b21\u5fc5\u4e3a \\(l\\) \u6216 \\(l+1\\) \u3002</li> </ol> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\u5728\u5f88\u591a\u573a\u5408\u4e0b\u51fa\u73b0\uff0c\u4e0b\u9762\u7684\u6027\u8d284\u548c\u6027\u8d285\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u4e24\u4e2a\u91cd\u8981\u7279\u6027\u3002</p> <p>\u6027\u8d284 \u5177\u6709 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a \\(\\left \\lfloor log_{2}n \\right \\rfloor + 1\\) \u3002</p> <p>\u6027\u8d285 \u5982\u679c\u5bf9\u4e00\u68f5\u6709 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff08\u5176\u6df1\u5ea6\u4e3a \\(\\left \\lfloor log_{2}n \\right \\rfloor + 1\\) \uff09\u7684\u7ed3\u70b9\u6309\u5c42\u5e8f\u7f16\u53f7\uff08\u4ece\u7b2c \\(1\\) \u5c42\u5230\u7b2c \\(\\left \\lfloor log_{2}n \\right \\rfloor + 1\\) \u5c42\uff0c\u6bcf\u5c42\u4ece\u5de6\u5230\u53f3\uff09\uff0c\u5219\u5bf9\u4efb\u4e00\u7ed3\u70b9 \\(i\uff081 \\le i \\le n\uff09\\) \uff0c\u6709</p> <ol> <li>\u5982\u679c \\(i = 1\\) \uff0c\u5219\u7ed3\u70b9 \\(i\\) \u662f\u4e8c\u53c9\u6811\u7684\u6839\uff0c\u65e0\u53cc\u4eb2\uff1b\u5982\u679c \\(i &gt; 1\\) \uff0c\u5219\u5176\u53cc\u4eb2 \\(PARENT(i)\\) \u662f\u7ed3\u70b9 \\(\\left \\lfloor i / 2 \\right \\rfloor\\) \u3002</li> <li>\u5982\u679c \\(2i &gt; n\\) \uff0c\u5219\u7ed3\u70b9 \\(i\\) \u65e0\u5de6\u5b69\u5b50\uff08\u7ed3\u70b9 \\(i\\) \u4e3a\u53f6\u5b50\u7ed3\u70b9\uff09\uff1b\u5426\u5219\u5176\u5de6\u5b69\u5b50 \\(LCHILD(i)\\) \u662f\u7ed3\u70b9 \\(2i\\) \u3002</li> <li>\u5982\u679c \\(2i+1 &gt; n\\) \uff0c\u5219\u7ed3\u70b9 \\(i\\) \u65e0\u53f3\u5b69\u5b50\uff1b\u5426\u5219\u5176\u53f3\u5b69\u5b50 \\(RCHILD(i)\\) \u662f\u7ed3\u70b9 \\(2i+1\\) \u3002</li> </ol>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_9","title":"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784","text":"<ul> <li> <p>\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784 <pre><code>----------------------------------------------------\n| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |\n----------------------------------------------------\n\u5b8c\u5168\u4e8c\u53c9\u6811\n\n-------------------------------------------------\n| 1 | 2 | 3 | 4 | 5 | 0 | 0 | 0 | 0 | 0 | 6 | 7 |\n-------------------------------------------------\n\u4e00\u822c\u4e8c\u53c9\u6811\uff080\u8868\u793a\u4e0d\u5b58\u5728\u6b64\u7ed3\u70b9\uff09\n\u5bf9\u4e8e\u4e00\u822c\u4e8c\u53c9\u6811\uff0c\u66f4\u9002\u5408\u91c7\u7528\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\n</code></pre></p> </li> <li> <p>\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784</p> </li> </ul>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_10","title":"\u904d\u5386\u4e8c\u53c9\u6811\u548c\u7ebf\u7d22\u4e8c\u53c9\u6811","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_11","title":"\u904d\u5386\u4e8c\u53c9\u6811","text":"<p>\u82e5\u89c4\u5b9a\u5148\u5de6\u540e\u53f3\uff0c\u5219\u6709\uff1a</p> <ul> <li> <p>DLR - \u5148\uff08\u6839\uff09\u5e8f\u904d\u5386 <pre><code>void PreOrderTraversal(binary *tree)\n{\n    if (tree == NULL)\n    {\n        return;\n    }\n    printf(\"%d\", tree-&gt;data);\n    PreOrderTraversal(tree-&gt;left);\n    PreOrderTraversal(tree-&gt;right);\n    return;\n}\n</code></pre></p> </li> <li> <p>LDR - \u4e2d\uff08\u6839\uff09\u5e8f\u904d\u5386 <pre><code>void InOrderTraversal(binary *tree)\n{\n    if (tree == NULL)\n    {\n        return;\n    }\n    InOrderTraversal(tree-&gt;left);\n    printf(\"%d\", tree-&gt;data);\n    InOrderTraversal(tree-&gt;right);\n    return;\n}\n</code></pre></p> </li> <li> <p>LRD - \u540e\uff08\u6839\uff09\u5e8f\u904d\u5386 <pre><code>void PostOrderTraversal(binary *tree)\n{\n    if (tree == NULL)\n    {\n        return;\n    }\n    PostOrderTraversal(tree-&gt;left);\n    PostOrderTraversal(tree-&gt;right);\n    printf(\"%d\", tree-&gt;data);\n    return;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_12","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811","text":"<p>\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u672c\u8d28\u662f\u65b9\u4fbf\u8fdb\u884c\u524d\u540e\u7ed3\u70b9\u7684\u67e5\u8be2\u3002</p>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_13","title":"\u6811\u548c\u68ee\u6797","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_14","title":"\u6811\u7684\u5b58\u50a8\u7ed3\u6784","text":"<ul> <li>\u53cc\u4eb2\u8868\u793a\u6cd5</li> <li>\u5b69\u5b50\u8868\u793a\u6cd5</li> <li> <p>\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5</p> <p>\u53c8\u79f0\u4e8c\u53c9\u6811\u8868\u793a\u6cd5\uff0c\u6216\u4e8c\u53c9\u94fe\u8868\u8868\u793a\u6cd5\uff0c\u5373\u4ee5\u4e8c\u53c9\u94fe\u8868\u505a\u6811\u7684\u5b58\u50a8\u7ed3\u6784\u3002</p> <p>\u8fd9\u79cd\u5b58\u50a8\u7ed3\u6784\u7684\u6709\u70b9\u662f\u5b83\u548c\u4e8c\u53c9\u6811\u7684\u4e8c\u53c9\u94fe\u8868\u8868\u793a\u5b8c\u5168\u4e00\u6837\uff0c\u4fbf\u4e8e\u5c06\u4e00\u822c\u7684\u6811\u7ed3\u6784\u8f6c\u4e3a\u4e8c\u53c9\u6811\u8fdb\u884c\u5904\u7406\uff0c\u5229\u7528\u4e8c\u53c9\u6811\u7684\u7b97\u6cd5\u6765\u5b9e\u73b0\u5bf9\u6811\u7684\u64cd\u4f5c\u3002\u56e0\u6b64\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\u662f\u5e94\u7528\u8f83\u4e3a\u666e\u904d\u7684\u4e00\u79cd\u6811\u7684\u5b58\u50a8\u8868\u793a\u6cd5\u3002</p> </li> </ul>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_15","title":"\u68ee\u6797\u4e0e\u4e8c\u53c9\u6811\u7684\u8f6c\u6362","text":"<ul> <li> <p>\u68ee\u6797\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811</p> </li> <li> <p>\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u68ee\u6797</p> </li> </ul>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_16","title":"\u6811\u548c\u68ee\u6797\u7684\u904d\u5386","text":"<ul> <li> <p>\u6811\u7684\u904d\u5386\uff08\u5148\u6839\u904d\u5386\u3001\u540e\u6839\u904d\u5386\uff09</p> </li> <li> <p>\u68ee\u6797\u7684\u904d\u5386\uff08\u5148\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\uff09</p> </li> </ul>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_17","title":"\u54c8\u592b\u66fc\u6811\u53ca\u5176\u5e94\u7528","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_18","title":"\u54c8\u592b\u66fc\u6811\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>\u54c8\u592b\u66fc\uff08Huffman\uff09\u6811\u53c8\u79f0\u4e3a\u6700\u4f18\u6811\uff0c\u662f\u4e00\u7c7b\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u6811\u3002</p> <ol> <li>\u8def\u5f84\uff1a\u4ece\u6811\u4e2d\u4e00\u4e2a\u7ed3\u70b9\u5230\u53e6\u4e00\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u5206\u652f\u6784\u6210\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u3002</li> <li>\u8def\u5f84\u957f\u5ea6\uff1a\u8def\u5f84\u4e0a\u7684\u5206\u652f\u6570\u76ee\u79f0\u4f5c\u8def\u5f84\u957f\u5ea6\u3002</li> <li>\u6811\u7684\u8def\u5f84\u957f\u5ea6\uff1a\u4ece\u6811\u6839\u5230\u6bcf\u4e00\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u3002</li> <li>\u6743\uff1a\u8d4b\u4e88\u67d0\u4e2a\u5b9e\u4f53\u7684\u4e00\u4e2a\u91cf\uff0c\u662f\u5bf9\u5b9e\u4f53\u7684\u67d0\u4e2a\u6216\u67d0\u4e9b\u5c5e\u6027\u7684\u6570\u503c\u5316\u63cf\u8ff0\u3002\u5b9e\u4f53\u6709\u7ed3\u70b9\uff08\u5143\u7d20\uff09\u548c\u8fb9\uff08\u5173\u7cfb\uff09\u4e24\u5927\u7c7b\uff0c\u6240\u4ee5\u5bf9\u5e94\u6709\u7ed3\u70b9\u6743\u548c\u8fb9\u6743\u3002</li> <li>\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff1a\u4ece\u8be5\u7ed3\u70b9\u5230\u6811\u6839\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u4e0e\u7ed3\u70b9\u4e0a\u6743\u7684\u4e58\u79ef\u3002</li> <li>\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff1a\u6811\u4e2d\u6240\u6709\u53f6\u5b50\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\uff0c\u901a\u5e38\u8bb0\u4f5c \\(WPL = \\sum_{k=1}^{n}w_{k}l_{k}\\) \u3002</li> <li>\u54c8\u592b\u66fc\u6811\uff1a\u5047\u8bbe\u6709m\u4e2a\u6743\u503c \\({w_{1}, w_{2}, ..., w_{m}}\\) \uff0c\u53ef\u4ee5\u6784\u9020\u4e00\u68f5\u542bn\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u6743\u4e3a \\(w_{i}\\) \uff0c\u5219\u5176\u4e2d\u5e26\u6743\u8def\u5f84\u957f\u5ea6 \\(WPL\\) \u6700\u5c0f\u7684\u4e8c\u53c9\u6811\u79f0\u505a\u6700\u4f18\u4e8c\u53c9\u6811\u6216\u54c8\u592b\u66fc\u6811\u3002</li> </ol>"},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_19","title":"\u54c8\u592b\u66fc\u6811\u7684\u6784\u9020\u7b97\u6cd5","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_20","title":"\u54c8\u592b\u66fc\u7f16\u7801","text":""},{"location":"DataStructures/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/#_21","title":"\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u73b0","text":"<ul> <li> <p>\u5229\u7528\u4e8c\u53c9\u6811\u6c42\u89e3\u8868\u8fbe\u5f0f\u7684\u503c</p> </li> <li> <p>\u8868\u8fbe\u5f0f\u6811\u7684\u521b\u5efa</p> </li> </ul>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/","title":"\u57fa\u672c\u6982\u5ff5\u548c\u672f\u8bed","text":""},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_2","title":"\u6570\u636e\u3001\u6570\u636e\u5143\u7d20\u3001\u6570\u636e\u9879\u548c\u6570\u636e\u5bf9\u8c61","text":""},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_3","title":"\u57fa\u672c\u6982\u5ff5","text":"<ul> <li>\u6570\u636e: \u662f\u5ba2\u89c2\u4e8b\u7269\u7684\u7b26\u53f7\u8868\u793a\u3002</li> <li>\u6570\u636e\u5143\u7d20: \u662f\u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\u3002\uff08\u7b80\u5355\u7406\u89e3\u5c31\u662f\u4e00\u6761\u6570\u636e\u8bb0\u5f55\uff09</li> <li>\u6570\u636e\u9879: \u662f\u7ec4\u6210\u6570\u636e\u5143\u7d20\u7684\u3001\u6709\u72ec\u7acb\u542b\u4e49\u7684\u3001\u4e0d\u53ef\u5206\u5272\u7684\u6700\u5c0f\u5355\u4f4d\u3002\uff08\u7b80\u5355\u7406\u89e3\u5c31\u662f\u6570\u636e\u8868\u7684\u5b57\u6bb5\uff09</li> <li>\u6570\u636e\u5bf9\u8c61: \u662f\u6027\u8d28\u76f8\u540c\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\uff0c\u662f\u6570\u636e\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\uff08\u4f8b\u5982\uff1a\u6574\u6570\u6570\u636e\u5bf9\u8c61\u5c31\u662f\u6240\u6709\u6574\u6570\uff0c\u5b57\u7b26\u6570\u636e\u5bf9\u8c61\u5c31\u662f\u6240\u6709\u5b57\u7b26\u3002\uff09</li> </ul>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_4","title":"\u6570\u636e\u7ed3\u6784","text":"<ol> <li> <p>\u903b\u8f91\u7ed3\u6784</p> <ul> <li>\u96c6\u5408\u7ed3\u6784 </li> <li>\u7ebf\u6027\u7ed3\u6784 </li> <li>\u6811\u7ed3\u6784 </li> <li>\u56fe\u7ed3\u6784 </li> </ul> </li> <li> <p>\u5b58\u50a8\u7ed3\u6784</p> <ul> <li>\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784 </li> <li>\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784 </li> </ul> </li> </ol> <pre><code>stateDiagram-v2\n    \u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784 --&gt; \u7ebf\u6027\u7ed3\u6784\n    \u7ebf\u6027\u7ed3\u6784 --&gt; \u7ebf\u6027\u8868\n    \u7ebf\u6027\u8868 --&gt; \u4e00\u822c\u7ebf\u6027\u8868\n    \u4e00\u822c\u7ebf\u6027\u8868 --&gt; \uff08\u7ebf\u6027\u8868\uff09\n    \u7ebf\u6027\u8868 --&gt; \u7279\u6b8a\u7ebf\u6027\u8868\n    \u7279\u6b8a\u7ebf\u6027\u8868 --&gt; \u6808\u4e0e\u961f\u5217\n    \u7279\u6b8a\u7ebf\u6027\u8868 --&gt; \u5b57\u7b26\u4e32\n    \u7ebf\u6027\u8868 --&gt; \u7ebf\u6027\u8868\u7684\u63a8\u5e7f\n    \u7ebf\u6027\u8868\u7684\u63a8\u5e7f --&gt; \u6570\u7ec4\n    \u7ebf\u6027\u8868\u7684\u63a8\u5e7f --&gt; \u5e7f\u4e49\u8868\n\n    \u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784 --&gt; \u975e\u7ebf\u6027\u7ed3\u6784\n    \u975e\u7ebf\u6027\u7ed3\u6784 --&gt; \u6811\u7ed3\u6784\n    \u6811\u7ed3\u6784 --&gt; \u6811\n    \u6811\u7ed3\u6784 --&gt; \u4e8c\u53c9\u6811\n    \u975e\u7ebf\u6027\u7ed3\u6784 --&gt; \u56fe\u7ed3\u6784\n    \u56fe\u7ed3\u6784 --&gt; \u6709\u5411\u56fe\n    \u56fe\u7ed3\u6784 --&gt; \u65e0\u5411\u56fe\n    \u975e\u7ebf\u6027\u7ed3\u6784 --&gt; \u96c6\u5408\u7ed3\u6784</code></pre>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_5","title":"\u6570\u636e\u7c7b\u578b\u548c\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<ol> <li>\u6570\u636e\u7c7b\u578b\uff08Data Type\uff09     \u6570\u636e\u7c7b\u578b\u662f\u9ad8\u7ea7\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u57fa\u672c\u6982\u5ff5\u3002\u6570\u636e\u7c7b\u578b\u662f\u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u8fd9\u4e2a\u503c\u96c6\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0\u3002</li> <li> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08Abstract Data Type, ADT\uff09     \u4e00\u822c\u6307\u7531\u7528\u6237\u5b9a\u4e49\u7684\u3001\u8868\u793a\u5e94\u7528\u95ee\u9898\u7684\u6570\u5b66\u6a21\u578b\uff0c\u4ee5\u53ca\u5b9a\u4e49\u5728\u8fd9\u4e2a\u6a21\u578b\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0\uff0c\u5177\u4f53\u5305\u62ec\u4e09\u90e8\u5206\uff1a\u6570\u636e\u5bf9\u8c61\u3001\u6570\u636e\u5bf9\u8c61\u4e0a\u5173\u7cfb\u7684\u96c6\u5408\u3001\u4ee5\u53ca\u5bf9\u6570\u636e\u5bf9\u8c61\u7684\u57fa\u672c\u64cd\u4f5c\u7684\u96c6\u5408\u3002\u53ef\u4ee5\u7528\uff08D\uff0cS\uff0cP\uff09\u4e09\u5143\u7ec4\u8868\u793a\u3002</p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49\u683c\u5f0f</p> <pre><code>ADT \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u540d {\n    \u6570\u636e\u5bf9\u8c61\uff1a&lt;\u6570\u636e\u5bf9\u8c61\u7684\u5b9a\u4e49&gt;\n    \u6570\u636e\u5173\u7cfb\uff1a&lt;\u6570\u636e\u5173\u7cfb\u7684\u5b9a\u4e49&gt;\n    \u57fa\u672c\u64cd\u4f5c\uff1a&lt;\u57fa\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49&gt;\n} ADT \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u540d\n</code></pre> \u57fa\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49\u683c\u5f0f <pre><code>\u57fa\u672c\u64cd\u4f5c\u540d\uff08\u53c2\u6570\u8868\uff09\n    \u521d\u59cb\u6761\u4ef6\uff1a&lt;\u521d\u59cb\u6761\u4ef6\u63cf\u8ff0&gt;\n    \u64cd\u4f5c\u7ed3\u679c\uff1a&lt;\u64cd\u4f5c\u7ed3\u679c\u63cf\u8ff0&gt;\n</code></pre> </li> </ol>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_6","title":"\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u8868\u793a\u548c\u5b9e\u73b0","text":"<p>1\u3001 \u5b9a\u4e49\u90e8\u5206</p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5b9a\u4e49</p> <pre><code>ADT Complex {\n    \u6570\u636e\u5bf9\u8c61\uff1aD = {e1, e2|e1, e2\u2208R, R\u662f\u5b9e\u6570\u96c6}\n    \u6570\u636e\u5173\u7cfb\uff1aS = {&lt;e1,e2&gt;|e1\u662f\u590d\u6570\u7684\u5b9e\u90e8\uff0ce2\u662f\u590d\u6570\u7684\u865a\u90e8}\n    \u57fa\u672c\u64cd\u4f5c\uff1a\n        Create(&amp;C, x, y)\n            \u64cd\u4f5c\u7ed3\u679c\uff1a\u6784\u9020\u590d\u6570C\uff0c\u5176\u5b9e\u90e8\u548c\u865a\u90e8\u5206\u522b\u88ab\u8d4b\u4ee5\u53c2\u6570x\u548cy\u7684\u503c\u3002\n        GetReal(C)\n            \u521d\u59cb\u6761\u4ef6\uff1a\u590d\u6570C\u5df2\u5b58\u5728\u3002\n            \u64cd\u4f5c\u7ed3\u679c\uff1a\u8fd4\u56de\u590d\u6570C\u7684\u5b9e\u90e8\u503c\u3002\n        GetImag(C)\n            \u521d\u59cb\u6761\u4ef6\uff1a\u590d\u6570C\u5df2\u5b58\u5728\u3002\n            \u64cd\u4f5c\u7ed3\u679c\uff1a\u8fd4\u56de\u590d\u6570C\u7684\u865a\u90e8\u503c\u3002\n        Add(C1, C2)\n            \u521d\u59cb\u6761\u4ef6\uff1aC1\uff0cC2\u662f\u590d\u6570\u3002\n            \u64cd\u4f5c\u7ed3\u679c\uff1a\u8fd4\u56de\u4e24\u4e2a\u590d\u6570C1\u548cC2\u7684\u548c\u3002\n        Sub(C1, C2)\n            \u521d\u59cb\u6761\u4ef6\uff1aC1\uff0cC2\u662f\u590d\u6570\u3002\n            \u64cd\u4f5c\u7ed3\u679c\uff1a\u8fd4\u56de\u4e24\u4e2a\u590d\u6570C1\u548cC2\u7684\u5dee\u3002\n} ADT Complex\n</code></pre> <p>2\u3001 \u8868\u793a\u90e8\u5206</p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u8868\u793a</p> <pre><code>typedef struct          // \u590d\u6570\u7c7b\u578b\n{\n    float Realpart;     // \u5b9e\u90e8\n    float Imagepart;    // \u865a\u90e8\n} Complex;\n</code></pre> <p>3\u3001 \u5b9e\u73b0\u90e8\u5206</p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5b9e\u73b0</p> <pre><code>void Create(&amp;Complex C, float x, float y)\n{\n    /* \u6784\u9020\u4e00\u4e2a\u590d\u6570 */\n    C.Realpart = x;\n    C.Imagepart = y;\n}\n\nfloat GetReal(Complex C)\n{\n    /* \u53d6\u590d\u6570C = x + yi \u7684\u5b9e\u90e8 */\n    return C.Realpart;\n}\n\nfloat GetImag(Complex C)\n{\n    /* \u53d6\u590d\u6570C = x + yi \u7684\u865a\u90e8 */\n    return C.Imagepart;\n}\n\nComplex Add(Complex C1, Complex C2)\n{\n    /* \u6c42\u4e24\u4e2a\u590d\u6570C1\u548cC2\u7684\u548csum */\n    Complex sum;\n    sum.Realpart = C1.Realpart + C2.Realpart;\n    sum.Imagepart = C1.Imagepart + C2.Imagepart;\n    return sum;\n}\n\nComplex Sub(Complex C1, Complex C2)\n{\n    /* \u6c42\u4e24\u4e2a\u590d\u6570C1\u548cC2\u7684\u5deedifference */\n    Complex difference;\n    difference.Realpart = C1.Realpart - C2.Realpart;\n    difference.Imagepart = C1.Imagepart - C2.Imagepart;\n    return difference;\n}\n</code></pre>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_7","title":"\u7b97\u6cd5\u548c\u7b97\u6cd5\u5206\u6790","text":""},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_8","title":"\u7b97\u6cd5\u7684\u5b9a\u4e49\u53ca\u7279\u6027","text":"<p>\u7b97\u6cd5\u662f\u4e3a\u4e86\u89e3\u51b3\u67d0\u7c7b\u95ee\u9898\u800c\u89c4\u5b9a\u7684\u4e00\u4e2a\u6709\u9650\u957f\u7684\u64cd\u4f5c\u5e8f\u5217</p> <ol> <li>\u6709\u7a77\u6027\u3002</li> <li>\u786e\u5b9a\u6027\u3002</li> <li>\u53ef\u884c\u6027\u3002</li> <li>\u8f93\u5165\u3002\u4e00\u4e2a\u7b97\u6cd5\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u3002</li> <li>\u8f93\u51fa\u3002\u4e00\u4e2a\u7b97\u6cd5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u51fa\u3002</li> </ol>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_9","title":"\u8bc4\u4ef7\u7b97\u6cd5\u4f18\u52a3\u7684\u57fa\u672c\u6807\u51c6","text":"<ol> <li>\u6b63\u786e\u6027\u3002</li> <li>\u53ef\u8bfb\u6027\u3002\u4e00\u4e2a\u597d\u7684\u7b97\u6cd5\uff0c\u9996\u5148\u5e94\u4fbf\u4e8e\u4eba\u4eec\u7406\u89e3\u548c\u76f8\u4e92\u4ea4\u6d41\u3002</li> <li>\u5065\u58ee\u6027\u3002</li> <li>\u9ad8\u6548\u6027\u3002</li> </ol>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_10","title":"\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_11","title":"\u6e10\u8fd1\u5206\u6790","text":"<p>\u7b97\u6cd5\u7684\u6548\u7387\u53d6\u51b3\u4e8e\u6267\u884c\u7b97\u6cd5\u6240\u9700\u7684\u65f6\u95f4\uff0c\u5b58\u50a8\u7a7a\u95f4\u548c\u5176\u4ed6\u8d44\u6e90\u3002 \u501f\u52a9\u6e10\u8fd1\u7b26\u53f7\u6765\u6d4b\u91cf\u6548\u7387\u3002\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u8f93\u5165\uff0c\u7b97\u6cd5\u53ef\u80fd\u4e0d\u4f1a\u5177\u6709\u76f8\u540c\u7684\u6027\u80fd\u3002 \u968f\u7740\u8f93\u5165\u5927\u5c0f\u7684\u589e\u52a0\uff0c\u6027\u80fd\u5c06\u4f1a\u6539\u53d8\u3002\u5c06\u7b97\u6cd5\u6027\u80fd\u968f\u8f93\u5165\u5927\u5c0f\u987a\u5e8f\u7684\u53d8\u5316\u800c\u8fdb\u884c\u7684\u7814\u7a76\u5b9a\u4e49\u4e3a\u6e10\u8fd1\u5206\u6790\u3002</p>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_12","title":"\u6e10\u8fd1\u7b26\u53f7","text":"<p>\u6e10\u8fdb\u7b26\u53f7\u662f\u5f53\u8f93\u5165\u8d8b\u4e8e\u7279\u5b9a\u503c\u6216\u6781\u9650\u503c\u65f6\u7528\u4e8e\u63cf\u8ff0\u7b97\u6cd5\u8fd0\u884c\u65f6\u95f4\u7684\u6570\u5b66\u7b26\u53f7\u3002\u4f8b\u5982\uff1a\u5728\u5192\u6ce1\u6392\u5e8f\u4e2d\uff0c\u5f53\u8f93\u5165\u6570\u7ec4\u5df2\u7ecf\u6392\u5e8f\u65f6\uff0c\u7b97\u6cd5\u82b1\u8d39\u7684\u65f6\u95f4\u662f\u7ebf\u6027\u7684\uff0c\u5373\u6700\u4f73\u60c5\u51b5\u3002\u4f46\u662f\uff0c\u5f53\u8f93\u5165\u6570\u7ec4\u5904\u4e8e\u53cd\u5411\u6761\u4ef6\u65f6\uff0c\u8be5\u7b97\u6cd5\u5c06\u82b1\u8d39\u6700\u5927\u65f6\u95f4\uff08\u4e8c\u6b21\uff09\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff0c\u5373\u6700\u574f\u7684\u60c5\u51b5\u3002\u5f53\u8f93\u5165\u6570\u7ec4\u65e2\u672a\u6392\u5e8f\u4e5f\u4e0d\u53cd\u5411\u65f6\uff0c\u5219\u9700\u8981\u5e73\u5747\u65f6\u95f4\u3002 \u8fd9\u4e9b\u6301\u7eed\u65f6\u95f4\u4f7f\u7528\u6e10\u8fd1\u7b26\u53f7\u8868\u793a\u3002\u4e3b\u8981\u6709\u4e09\u79cd\u6e10\u8fd1\u7b26\u53f7\uff1aTheta \u7b26\u53f7\uff0cOmega \u7b26\u53f7\u548c\u5927 O \u7b26\u53f7\u3002</p>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#theta","title":"Theta \u8868\u793a\u6cd5\uff08\u0398 \u8868\u793a\u6cd5\uff09","text":"<p>Theta \u8868\u793a\u6cd5\u4ece\u4e0a\u65b9\u548c\u4e0b\u65b9\u5c06\u51fd\u6570\u62ec\u8d77\u6765\u3002 \u7531\u4e8e\u5b83\u4ee3\u8868\u7b97\u6cd5\u8fd0\u884c\u65f6\u95f4\u7684\u4e0a\u9650\u548c\u4e0b\u9650\uff0c\u56e0\u6b64\u53ef\u7528\u4e8e\u5206\u6790\u7b97\u6cd5\u7684\u5e73\u5747\u7528\u4f8b\u590d\u6742\u5ea6\u3002  Theta \u5c06\u51fd\u6570\u9650\u5236\u5728\u5e38\u6570\u56e0\u5b50\u4e4b\u5185\uff0c\u5bf9\u4e8e\u51fd\u6570$ g(n) $ \uff0c$ \u0398(g(n)) $\u7531\u4ee5\u4e0b\u5173\u7cfb\u5f0f\u7ed9\u51fa\uff1a     $$ \\Theta(g(n)) = f(n) : \\text{\u5b58\u5728\u6b63\u7684\u5e38\u6570} c_1, c_2 \\text{\u548c} n_0, $$     $$ \\text{\u4f7f\u5f97\u5bf9\u4e8e\u6240\u6709\u7684} n \\geq n_0, \\text{\u6709} 0 \\leq c_1g(n) \\leq f(n) \\leq c_2g(n) $$</p>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#oo","title":"\u5927O\u8868\u793a\u6cd5\uff08O \u8868\u793a\u6cd5\uff09","text":"<p>\u5927 O \u8868\u793a\u6cd5\u8868\u793a\u7b97\u6cd5\u8fd0\u884c\u65f6\u95f4\u7684\u4e0a\u9650\u3002 \u56e0\u6b64\uff0c\u5b83\u7ed9\u51fa\u4e86\u7b97\u6cd5\u7684\u6700\u574f\u60c5\u51b5\u7684\u590d\u6742\u5ea6\u3002  \u5927 O \u7ed9\u51fa\u51fd\u6570\u7684\u4e0a\u9650\uff1a     $$  O(g(n)) =  f(n) : \\text{\u5b58\u5728\u6b63\u7684\u5e38\u6570} c \\text{\u548c} n_0, $$     $$ \\text{\u4f7f\u5f97\u5bf9\u4e8e\u6240\u6709\u7684} n \\geq n_0, \\text{\u6709} 0 \\leq f(n) \\leq cg(n) $$</p>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_13","title":"\u03a9 \u8868\u793a\u6cd5\uff08\u03a9\u8868\u793a\u6cd5\uff09","text":"<p>\u03a9 \u8868\u793a\u7b97\u6cd5\u8fd0\u884c\u65f6\u95f4\u7684\u4e0b\u9650\u3002 \u56e0\u6b64\uff0c\u5b83\u63d0\u4f9b\u4e86\u7b97\u6cd5\u7684\u6700\u4f73\u60c5\u51b5\u590d\u6742\u5ea6\u3002  \u03a9 \u7ed9\u51fa\u51fd\u6570\u7684\u4e0b\u9650\uff1a     $$ \\Omega(g(n)) = f(n) : \\text{\u5b58\u5728\u6b63\u7684\u5e38\u6570} c \\text{\u548c} n_0, $$     $$ \\text{\u4f7f\u5f97\u5bf9\u4e8e\u6240\u6709\u7684} n \\geq n_0, \\text{\u6709} 0 \\leq cg(n) \\leq f(n) $$</p> <p></p>"},{"location":"DataStructures/%E6%A6%82%E8%BF%B0/#_14","title":"\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<p>\u5173\u4e8e\u7b97\u6cd5\u7684\u5b58\u50a8\u7a7a\u95f4\u9700\u6c42\uff0c\u7c7b\u4f3c\u4e8e\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u91c7\u7528\u6e10\u8fd1\u7a7a\u95f4\u590d\u6742\u5ea6\uff08Space Complexity\uff09\u4f5c\u4e3a\u7b97\u6cd5\u6240\u9700\u5b58\u50a8\u7a7a\u95f4\u7684\u91cf\u5ea6\uff0c\u7b80\u79f0\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u5b83\u4e5f\u662f\u95ee\u9898\u89c4\u6a21n\u7684\u51fd\u6570\uff0c\u8bb0\u4f5c\uff1a $$     S(n) = O(f(n)) $$</p> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7a0b\u5e8f\u5728\u673a\u5668\u4e0a\u6267\u884c\u65f6\uff0c\u9664\u4e86\u9700\u8981\u5bc4\u5b58\u672c\u8eab\u6240\u7528\u7684\u6307\u4ee4\u3001\u5e38\u6570\u3001\u53d8\u91cf\u548c\u8f93\u5165\u6570\u636e\u5916\uff0c\u8fd8\u9700\u8981\u4e00\u4e9b\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u8f85\u52a9\u5b58\u50a8\u7a7a\u95f4\u3002\u5176\u4e2d\uff0c\u5bf9\u4e8e\u8f93\u5165\u6570\u636e\u6240\u5360\u7684\u5177\u4f53\u5b58\u50a8\u91cf\u53d6\u51b3\u4e8e\u95ee\u9898\u672c\u8eab\uff0c\u4e0e\u7b97\u6cd5\u65e0\u5173\uff0c\u8fd9\u6837\u53ea\u9700\u5206\u6790\u8be5\u7b97\u6cd5\u5728\u5b9e\u73b0\u65f6\u6240\u9700\u8981\u7684\u8f85\u52a9\u7a7a\u95f4\u5c31\u53ef\u4ee5\u4e86\u3002\u82e5\u7b97\u6cd5\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u8f85\u52a9\u7a7a\u95f4\u76f8\u5bf9\u4e8e\u8f93\u5165\u6570\u636e\u91cf\u800c\u8a00\u662f\u4e2a\u5e38\u6570\uff0c\u5219\u79f0\u8fd9\u4e2a\u7b97\u6cd5\u4e3a\u539f\u5730\u5de5\u4f5c\uff0c\u8f85\u52a9\u7a7a\u95f4\u4e3a $ O(1) $\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5f80\u5f80\u76f8\u4e92\u5f71\u54cd\uff0c\u5f53\u8ffd\u6c42\u4e00\u4e2a\u8f83\u597d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u65f6\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5360\u7528\u8f83\u591a\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5373\u53ef\u80fd\u4f1a\u4f7f\u7a7a\u95f4\u590d\u6742\u5ea6\u6027\u80fd\u53d8\u5dee\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u4e0d\u8fc7\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u9274\u4e8e\u8fd0\u7b97\u7a7a\u95f4\u8f83\u4e3a\u5145\u8db3\uff0c\u4eba\u4eec\u90fd\u4ee5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f5c\u4e3a\u7b97\u6cd5\u4f18\u52a3\u7684\u8861\u91cf\u6307\u6807\u3002</p>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/","title":"\u7ebf\u6027\u8868","text":"<p>\u7ebf\u6027\u7ed3\u6784\u7684\u57fa\u672c\u7279\u70b9\u662f\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u65e0\u76f4\u63a5\u524d\u9a71\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u65e0\u76f4\u63a5\u540e\u7ee7\u4e4b\u5916\uff0c\u5176\u4ed6\u6bcf\u4e2a\u6570\u636e\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u524d\u9a71\u548c\u540e\u7ee7\u3002\u7ebf\u6027\u8868\u662f\u57fa\u672c\u4e14\u5e38\u7528\u7684\u4e00\u79cd\u7ebf\u6027\u7ed3\u6784\uff0c\u540c\u65f6\u4e5f\u662f\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u7684\u57fa\u7840\uff0c\u5c24\u5176\u5355\u94fe\u8868\uff0c\u662f\u8d2f\u7a7f\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u8bfe\u7a0b\u7684\u57fa\u672c\u6280\u672f\u3002</p>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_2","title":"\u7ebf\u6027\u8868\u7684\u5b9a\u4e49\u548c\u7279\u70b9","text":"<p>\u7531 \\((n \\ge 0)\\) \u4e2a\u6570\u636e\u7279\u6027\u76f8\u540c\u7684\u5143\u7d20\u6784\u6210\u7684\u6709\u5e8f\u5e8f\u5217\u79f0\u4e3a\u7ebf\u6027\u8868\u3002\u76f8\u90bb\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u5b58\u5728\u7740\u5e8f\u5076\u5173\u7cfb\u3002</p> <p>\u7ebf\u6027\u8868\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 \\(n(n \\ge 0)\\) \u5b9a\u4e49\u4e3a\u7ebf\u6027\u8868\u7684\u957f\u5ea6\uff0c\\(n = 0\\) \u65f6\u79f0\u4e3a\u7a7a\u8868\u3002</p> <p>\u5bf9\u4e8e\u975e\u7a7a\u7684\u7ebf\u6027\u8868\u6216\u7ebf\u6027\u7ed3\u6784\uff0c\u5176\u7279\u70b9\u662f\uff1a</p> <ol> <li>\u5b58\u5728\u552f\u4e00\u7684\u4e00\u4e2a\u88ab\u79f0\u4f5c\u201c\u7b2c\u4e00\u4e2a\u201d\u7684\u6570\u636e\u5143\u7d20\uff1b</li> <li>\u5b58\u5728\u552f\u4e00\u7684\u4e00\u4e2a\u88ab\u79f0\u4f5c\u201c\u6700\u540e\u4e00\u4e2a\u201d\u7684\u6570\u636e\u5143\u7d20\uff1b</li> <li>\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u5916\uff0c\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u5143\u7d20\u5747\u53ea\u6709\u4e00\u4e2a\u524d\u9a71\uff1b</li> <li>\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5916\uff0c\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u5143\u7d20\u5747\u53ea\u6709\u4e00\u4e2a\u540e\u7ee7\uff1b</li> </ol> <p>\u6848\u4f8b\u5f15\u5165</p> <ul> <li>\u4e00\u5143\u591a\u9879\u5f0f\u7684\u8fd0\u7b97</li> <li>\u7a00\u758f\u591a\u9879\u5f0f\u7684\u8fd0\u7b97</li> <li>\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf</li> </ul>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_3","title":"\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u8868\u793a\u548c\u5b9e\u73b0","text":""},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_4","title":"\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u8868\u793a","text":"<p>\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u8868\u793a\u6307\u7684\u662f\u7528\u4e00\u7ec4\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u4f9d\u6b21\u5b58\u50a8\u7ebf\u6027\u8868\u7684\u6570\u636e\u5143\u7d20\uff0c\u8fd9\u79cd\u8868\u793a\u4e5f\u6210\u79f0\u4f5c\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u6216\u987a\u5e8f\u6620\u50cf\u3002\u901a\u5e38\uff0c\u79f0\u8fd9\u79cd\u5b58\u50a8\u7ed3\u6784\u7684\u7ebf\u6027\u8868\u4e3a\u987a\u5e8f\u8868\u3002\u5176\u7279\u70b9\u662f\uff0c\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u6570\u636e\u5143\u7d20\uff0c\u5176\u7269\u7406\u6b21\u5e8f\u4e5f\u662f\u76f8\u90bb\u7684\u3002\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u662f\u4e00\u79cd\u968f\u673a\u5b58\u53d6\u7684\u5b58\u50a8\u7ed3\u6784\u3002</p>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_5","title":"\u7ebf\u6027\u8868\u4e2d\u57fa\u672c\u64cd\u4f5c\u7684\u5b9e\u73b0","text":"<ol> <li>\u53d6\u503c\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(1)\\)</li> <li>\u67e5\u627e\u3002\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff08Average Search Length, ASL\uff09\u3002\\(ASL = \\sum_{i=1}^{n}p_{i}C_{i}\\)</li> <li>\u63d2\u5165\u3002\\(E_{ins}\\)\u4e3a\u5728\u957f\u5ea6\u4e3an\u7684\u7ebf\u6027\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u65f6\u6240\u9700\u79fb\u52a8\u5143\u7d20\u6b21\u6570\u7684\u671f\u671b\u503c\uff08\u5e73\u5747\u6b21\u6570\uff09\u3002\\(E_{ins}=\\sum_{i=1}^{n+1}p_{i}(n-i+1)\\)\u3002\u7531\u6b64\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n)\\)</li> <li>\u5220\u9664\u3002\\(E_{del}\\)\u4e3a\u5728\u957f\u5ea6\u4e3an\u7684\u7ebf\u6027\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u65f6\u6240\u9700\u79fb\u52a8\u5143\u7d20\u6b21\u6570\u7684\u671f\u671b\u503c\uff08\u5e73\u5747\u6b21\u6570\uff09\u3002\\(E_{del}=\\sum_{i=1}^{n}p_{i}(n-i)\\)\u3002\u7531\u6b64\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n)\\)</li> </ol> <p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u5b9a\u4e49\u90e8\u5206 <pre><code>/* \u72b6\u6001 */\n#define OK 1\n#define ERROR 0\n#define OVERFLOW -2\n\n/* \u6700\u5927\u503c */\n#define MAXSIZE 1000\n\ntypedef int Status;\ntypedef int ElemType;\n\n/* \u672c\u4f8b\u4e2di\u503c\u7684\u5408\u6cd5\u8303\u56f4\u5728 1 &lt;= i &lt;= n + 1 */\n\n/* \u987a\u5e8f\u8868 */\ntypedef struct\n{\n    ElemType* elem;\n    int length;\n} SqList;\n</code></pre></p> </li> <li> <p>\u987a\u5e8f\u8868\u7684\u521d\u59cb\u5316 <pre><code>/* \u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u987a\u5e8f\u8868 */\nStatus InitList(SqList* L)\n{\n\n    L-&gt;elem = malloc(sizeof(ElemType) * MAXSIZE);\n    if (L-&gt;elem == NULL)\n    {\n        return OVERFLOW;\n    }\n    L-&gt;length = 0;\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u987a\u5e8f\u8868\u7684\u53d6\u503c <pre><code>/* \u53d6\u7b2ci\u4e2a\u5143\u7d20 */\nStatus GetElem(SqList* L, int i, ElemType* e)\n{\n    if (i &lt; 1 || i &gt; L-&gt;length)\n    {\n        return ERROR;\n    }\n    *e = L-&gt;elem[i - 1];\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u987a\u5e8f\u8868\u7684\u67e5\u627e <pre><code>/* \u67e5\u627e\u3002\u6210\u529f\u8fd4\u56dei\uff0c\u4e0d\u6210\u529f\u8fd4\u56de0 */\nint LocateElem(SqList* L, ElemType e)\n{\n    int i = 0;\n    for (i = 0; i &lt; L-&gt;length; i += 1)\n    {\n        if (L-&gt;elem[i] == e)\n        {\n            return i + 1;\n        }\n    }\n    return 0;\n}\n</code></pre></p> </li> <li> <p>\u987a\u5e8f\u8868\u7684\u63d2\u5165 <pre><code>/* \u63d2\u5165\u3002\u5728\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3002*/\nStatus ListInsert(SqList* L, int i, ElemType e)\n{\n    int j = 0;\n\n    if (i &lt; 1 || i &gt; L-&gt;length + 1)\n    {\n        return ERROR;\n    }\n    if (L-&gt;length == MAXSIZE)\n    {\n        return ERROR;\n    }\n\n    for (int j = L-&gt;length - 1; j &gt;= i - 1; j -= 1)\n    {\n        L-&gt;elem[j + 1] = L-&gt;elem[j];\n    }\n    L-&gt;elem[i - 1] = e;\n    L-&gt;length += 1;\n\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u987a\u5e8f\u8868\u7684\u5220\u9664 <pre><code>/* \u5220\u9664\u3002\u5220\u9664\u987a\u5e8f\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u3002*/\nStatus ListDelete(SqList* L, int i)\n{\n    int j = 0;\n\n    if (i &lt; 1 || i &gt; L-&gt;length)\n    {\n        return ERROR;\n    }\n\n    for (j = i; j &lt; L-&gt;length; j += 1)\n    {\n        L-&gt;elem[j - 1] = L-&gt;elem[j];\n    }\n    L-&gt;length -= 1;\n\n    return OK;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_6","title":"\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u8868\u793a\u548c\u5b9e\u73b0","text":""},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_7","title":"\u5355\u94fe\u8868\u7684\u5b9a\u4e49\u548c\u8868\u793a","text":"<p>\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u7684\u7279\u70b9\u662f\uff1a\u7528\u4e00\u7ec4\u4efb\u610f\u7684\u5b58\u50a8\u5355\u5143\u5b58\u50a8\u7ebf\u6027\u8868\u7684\u6570\u636e\u5143\u7d20\uff08\u8fd9\u7ec4\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u662f\u8fde\u7eed\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e0d\u8fde\u7eed\u7684\uff09\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u8868\u793a\u6bcf\u4e2a\u6570\u636e\u5143\u7d20 \\(a_{i}\\) \u4e0e\u5176\u76f4\u63a5\u540e\u7ee7\u6570\u636e\u5143\u7d20 \\(a_{i + 1}\\) \u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb\uff0c\u5bf9\u6570\u636e\u5143\u7d20 \\(a_{i}\\) \u6765\u8bf4\uff0c\u9664\u4e86\u5b58\u50a8\u5176\u672c\u8eab\u7684\u4fe1\u606f\u4e4b\u5916\uff0c\u8fd8\u9700\u5b58\u50a8\u4e00\u4e2a\u6307\u793a\u5176\u76f4\u63a5\u540e\u7ee7\u7684\u4fe1\u606f\uff08\u5373\u76f4\u63a5\u540e\u7ee7\u7684\u5b58\u50a8\u4f4d\u7f6e\uff09\u3002\u8fd9\u4e24\u90e8\u5206\u4fe1\u606f\u7ec4\u6210\u7684\u6570\u636e\u5143\u7d20 \\(a_{i}\\) \u7684\u5b58\u50a8\u6620\u50cf\uff0c\u79f0\u4e3a\u7ed3\u70b9\uff08node\uff09\u3002\u5b83\u5305\u62ec\u4e24\u4e2a\u57df\uff1a\u5176\u4e2d\u5b58\u50a8\u6570\u636e\u5143\u7d20\u4fe1\u606f\u7684\u57df\u79f0\u4e3a\u6570\u636e\u57df\uff1b\u5b58\u50a8\u76f4\u63a5\u540e\u7ee7\u5b58\u50a8\u4f4d\u7f6e\u7684\u57df\u79f0\u4e3a\u6307\u9488\u57df\u3002\u6307\u9488\u57df\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\u79f0\u4f5c\u6307\u9488\u6216\u94fe\u3002n\u4e2a\u7ed3\u70b9\uff08\\(a_{i}\uff081 \\le i \\le n\uff09\\)\u7684\u5b58\u50a8\u6620\u50cf\uff09\u94fe\u7ed3\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u5373\u4e3a\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u3002\u53c8\u7531\u4e8e\u6b64\u94fe\u8868\u7684\u6bcf\u4e2a\u7ed3\u70b9\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u6307\u9488\u57df\uff0c\u6545\u53c8\u79f0\u7ebf\u6027\u94fe\u8868\u6216\u5355\u94fe\u8868\u3002</p> <p>\u6839\u636e\u94fe\u8868\u7ed3\u70b9\u6240\u542b\u6307\u9488\u4e2a\u6570\u3001\u6307\u9488\u6307\u5411\u548c\u6307\u9488\u8fde\u63a5\u65b9\u5f0f\uff0c\u53ef\u5c06\u94fe\u8868\u5206\u4e3a\u5355\u94fe\u8868\u3001\u5faa\u73af\u94fe\u8868\u3001\u53cc\u5411\u94fe\u8868\u3001\u4e8c\u53c9\u94fe\u8868\u3001\u5341\u5b57\u94fe\u8868\u3001\u90bb\u63a5\u8868\u3001\u90bb\u63a5\u591a\u91cd\u8868\u7b49\u3002\u5176\u4e2d\u5355\u94fe\u8868\u3001\u5faa\u73af\u94fe\u8868\u548c\u53cc\u5411\u94fe\u8868\u7528\u4e8e\u5b9e\u73b0\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\uff0c\u5176\u4ed6\u5f62\u5f0f\u591a\u7528\u4e8e\u5b9e\u73b0\u6811\u548c\u56fe\u7b49\u975e\u7ebf\u6027\u7ed3\u6784\u3002 </p> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u5728\u5355\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u4e4b\u524d\u9644\u8bbe\u4e00\u4e2a\u7ed3\u70b9\uff0c\u79f0\u4e4b\u4e3a\u5934\u7ed3\u70b9\u3002</p> <ul> <li>\u9996\u5143\u7ed3\u70b9\u3002\u9996\u5143\u7ed3\u70b9\u662f\u6307\u94fe\u8868\u4e2d\u5b58\u50a8\u7b2c\u4e00\u4e2a\u6570\u636e\u5143\u7d20 \\(a_{i}\\) \u7684\u7ed3\u70b9\u3002</li> <li>\u5934\u7ed3\u70b9\u3002\u5934\u7ed3\u70b9\u662f\u5728\u9996\u5143\u7ed3\u70b9\u4e4b\u524d\u9644\u8bbe\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5176\u6307\u9488\u57df\u6307\u5411\u9996\u5143\u7ed3\u70b9\u3002\u5934\u7ed3\u70b9\u7684\u6570\u636e\u4e0e\u53ef\u4ee5\u4e0d\u5b58\u50a8\u4efb\u4f55\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u5b58\u50a8\u4e0e\u6570\u636e\u5143\u7d20\u7c7b\u578b\u76f8\u540c\u7684\u5176\u4ed6\u9644\u52a0\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5f53\u6570\u636e\u5143\u7d20\u4e3a\u6574\u6570\u7c7b\u578b\u65f6\uff0c\u5934\u7ed3\u70b9\u7684\u6570\u636e\u57df\u4e2d\u53ef\u4ee5\u5b58\u653e\u8be5\u7ebf\u6027\u8868\u7684\u957f\u5ea6\u3002</li> <li>\u5934\u6307\u9488\u3002\u5934\u6307\u9488\u662f\u6307\u5411\u94fe\u8868\u4e2d\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u7684\u6307\u9488\u3002\u82e5\u94fe\u8868\u8bbe\u6709\u5934\u7ed3\u70b9\uff0c\u5219\u5934\u6307\u9488\u6240\u6307\u7ed3\u70b9\u4e3a\u7ebf\u6027\u8868\u7684\u5934\u7ed3\u70b9\uff1b\u82e5\u94fe\u8868\u4e0d\u8bbe\u5934\u7ed3\u70b9\uff0c\u5219\u5934\u7ed3\u70b9\u6240\u6307\u7ed3\u70b9\u4e3a\u8be5\u7ebf\u6027\u8868\u7684\u9996\u5143\u7ed3\u70b9\u3002</li> </ul>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_8","title":"\u5355\u94fe\u8868\u57fa\u672c\u64cd\u4f5c\u7684\u5b9e\u73b0","text":"<p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u5b9a\u4e49\u90e8\u5206 <pre><code>/* \u72b6\u6001 */\n#define OK 1\n#define ERROR 0\n#define OVERFLOW -2\n\ntypedef int Status;\ntypedef int ElemType;\n\n/* \u672c\u4f8b\u4e2di\u503c\u7684\u5408\u6cd5\u8303\u56f4\u5728 1 &lt;= i &lt;= n + 1 */\n\n/* \u5355\u94fe\u8868\u7ed3\u6784 */\ntypedef struct LNode\n{\n    ElemType data;\n    struct LNode* next;\n} LNode, *LinkList;\n</code></pre></p> </li> <li> <p>\u5355\u94fe\u8868\u7684\u521d\u59cb\u5316 <pre><code>/* \u6784\u9020\u4e00\u4e2a\u5e26\u5934\u8282\u70b9\u7684\u7a7a\u7684\u5355\u94fe\u8868L\uff0cL\u5c31\u662f\u5f53\u524d\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 */\nStatus InitList(LinkList* L)\n{\n    (*L) = malloc(sizeof(LNode));\n    if ((*L) == NULL)\n    {\n        return ERROR;\n    }\n    (*L)-&gt;next = NULL;\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u5355\u94fe\u8868\u7684\u53d6\u503c <pre><code>/* \u53d6\u7b2ci\u4e2a\u5143\u7d20 */\nStatus GetElem(LinkList L, int i, ElemType* e)\n{\n    LinkList p = L-&gt;next;\n    int j = 1;\n\n    while (p != NULL &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        j += 1;\n    }\n\n    if (p == NULL || j &gt; i)\n    {\n        return ERROR;\n    }\n    *e = p-&gt;data;\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u5355\u94fe\u8868\u7684\u6309\u503c\u67e5\u627e <pre><code>/* \u67e5\u627e\u3002\u6210\u529f\u8fd4\u56dee\u7ed3\u70b9\u5730\u5740\uff0c\u4e0d\u6210\u529f\u8fd4\u56deNULL */\nLNode* LocateElem(LinkList L, ElemType e)\n{\n    LinkList p = L-&gt;next;\n    while (p != NULL &amp;&amp; p-&gt;data != e)\n    {\n        p = p-&gt;next;\n    }\n    return p;\n}\n</code></pre></p> </li> <li> <p>\u5355\u94fe\u8868\u7684\u63d2\u5165 <pre><code>/* \u63d2\u5165\u3002\u5728\u5e26\u5934\u8282\u70b9\u7684\u5355\u94fe\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u503c\u4e3ae\u7684\u65b0\u7ed3\u70b9\u3002*/\nStatus ListInsert(LinkList L, int i, ElemType e)\n{\n    LinkList p = L; // \u5f53\u524d\u6307\u5411\u5934\u8282\u70b9\n    int j = 0; // \u6240\u4ee5\u662f\u7b2c0\u4e2a\u4f4d\u7f6e\n\n    // \u5728i-1\u7684\u540e\u9762\u8fdb\u884c\u63d2\u5165\n    while (p != NULL &amp;&amp; j &lt; i - 1) // i - 1\u4e3a\u5faa\u73af\u5230\u5e26\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n    {\n        p = p-&gt;next;\n        j += 1;\n    }\n\n    if (p == NULL || j &gt; i - 1)\n    {\n        return ERROR;\n    }\n\n    LNode* q = malloc(sizeof(LNode));\n    if (q == NULL)\n    {\n        return ERROR;\n    }\n    q-&gt;data = e;\n    q-&gt;next = p-&gt;next;\n    p-&gt;next = q;\n\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u5355\u94fe\u8868\u7684\u5220\u9664 <pre><code>/* \u5220\u9664\u3002\u5220\u9664\u987a\u5e8f\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u3002*/\nStatus ListDelete(LinkList L, int i)\n{\n    LinkList p = L;\n    int j = 0;\n\n    // \u5220\u9664i-1\u540e\u9762\u7684\u7ed3\u70b9\n    while (p != NULL &amp;&amp; j &lt; i - 1)\n    {\n        p = p-&gt;next;\n        j += 1;\n    }\n    if (p-&gt;next == NULL || j &gt; i - 1)\n    {\n        return ERROR;\n    }\n    LinkList q = p-&gt;next;\n    p-&gt;next = q-&gt;next;\n    free(q);\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u524d\u63d2\u6cd5\u521b\u5efa\u5355\u94fe\u8868\uff08\u4e00\u6b21\u6027\u521b\u5efan\u4e2a\u7ed3\u70b9\uff09 <pre><code>/* \u524d\u63d2\u6cd5\u521b\u5efa\u5355\u94fe\u8868 \u5e26\u5934\u7ed3\u70b9 */\nStatus CreateList_H(LinkList* L, int n)\n{\n    int i = 0;\n\n    (*L) = malloc(sizeof(LNode));\n    if ((*L) == NULL)\n    {\n        return ERROR;\n    }\n    (*L)-&gt;next = NULL;\n\n    LinkList head = *L;\n    for (i = 0; i &lt; n; i += 1)\n    {\n        LinkList p = malloc(sizeof(LNode));\n        if (p == NULL)\n        {\n            return ERROR;\n        }\n        printf(\"\u8bf7\u8f93\u5165\u5143\u7d20: \");\n        scanf(\"%d\", &amp;(p-&gt;data));\n        p-&gt;next = head-&gt;next;\n        head-&gt;next = p;\n    }\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u540e\u63d2\u6cd5\u521b\u5efa\u5355\u94fe\u8868\uff08\u4e00\u6b21\u6027\u521b\u5efan\u4e2a\u7ed3\u70b9\uff09 <pre><code>/* \u540e\u63d2\u6cd5\u521b\u5efa\u5355\u94fe\u8868 \u5e26\u5934\u7ed3\u70b9 */\nStatus CreateList_R(LinkList* L, int n)\n{\n    int i = 0;\n\n    (*L) = malloc(sizeof(LNode));\n    if ((*L) == NULL)\n    {\n        return ERROR;\n    }\n    (*L)-&gt;next = NULL;\n\n    LinkList p = *L;\n    for (i = 0; i &lt; n; i += 1)\n    {\n        LinkList q = malloc(sizeof(LNode));\n        if (q == NULL)\n        {\n            return ERROR;\n        }\n        printf(\"\u8bf7\u8f93\u5165\u5143\u7d20: \");\n        scanf(\"%d\", &amp;(q-&gt;data));\n        q-&gt;next = NULL;\n        p-&gt;next = q;\n        p = q;\n    }\n\n    return OK;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_9","title":"\u5faa\u73af\u94fe\u8868","text":"<p>\u5faa\u73af\u94fe\u8868\uff08Circular Linked List\uff09\u662f\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u3002\u5176\u7279\u70b9\u662f\u8868\u4e2d\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u6307\u9488\u57df\u6307\u5411\u5934\u7ed3\u70b9\uff0c\u6574\u4e2a\u94fe\u8868\u5f62\u6210\u4e00\u4e2a\u73af\u3002</p> <p>\u5728\u5355\u94fe\u8868\u4e2d\uff0c\u5224\u65ad\u7ec8\u6b62\u6761\u4ef6\u4e3a <code>p != NULL</code> \u6216 <code>p-&gt;next != NULL</code> \uff0c\u800c\u5faa\u73af\u5355\u94fe\u8868\u7684\u5224\u65ad\u6761\u4ef6\u4e3a <code>p != L</code> \u6216 <code>p-&gt;next != L</code> \u3002</p> <p>\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u82e5\u5728\u5faa\u73af\u94fe\u8868\u4e2d\u8bbe\u7acb\u5c3e\u6307\u9488\u800c\u4e0d\u8bbe\u5934\u6307\u9488\uff0c\u53ef\u4f7f\u4e00\u4e9b\u64cd\u4f5c\u7b80\u5316\u3002\u4f8b\u5982\uff0c\u4e24\u4e2a\u7ebf\u6027\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u8868\u3002</p>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_10","title":"\u53cc\u5411\u94fe\u8868","text":"<p>\u5bf9\u4e8e\u5355\u94fe\u8868\uff0c\u5982\u679c\u8981\u5bfb\u627e\u7ed3\u70b9\u7684\u76f4\u63a5\u524d\u9a71\uff0c\u5219\u5fc5\u987b\u4ece\u8868\u5934\u6307\u9488\u51fa\u53d1\u3002\u4e3a\u514b\u670d\u5355\u94fe\u8868\u8fd9\u79cd\u5355\u5411\u6027\u7684\u7f3a\u70b9\uff0c\u53ef\u4ee5\u5229\u7528\u53cc\u5411\u94fe\u8868\uff08Double Linked List\uff09\u3002\u5728\u53cc\u5411\u94fe\u8868\u7684\u7ed3\u70b9\u4e2d\u6709\u4e24\u4e2a\u6307\u9488\u57df\uff0c\u4e00\u4e2a\u6307\u5411\u76f4\u63a5\u540e\u7ee7\uff0c\u53e6\u4e00\u4e2a\u6307\u5411\u76f4\u63a5\u524d\u9a71\u3002</p> <p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u5b9a\u4e49\u90e8\u5206 <pre><code>/* \u72b6\u6001 */\n#define OK 1\n#define ERROR 0\n#define OVERFLOW -2\n\ntypedef int Status;\ntypedef int ElemType;\n\n/* \u672c\u4f8b\u4e2di\u503c\u7684\u5408\u6cd5\u8303\u56f4\u5728 1 &lt;= i &lt;= n + 1 */\n\n/* \u5355\u94fe\u8868\u7ed3\u6784 */\ntypedef struct DuLNode\n{\n    ElemType data;\n    struct DuLNode* prior;\n    struct DuLNode* next;\n} DuLNode, *DuLinkList;\n\n/* \u83b7\u53d6\u53cc\u5411\u94fe\u8868\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u7684\u5730\u5740 */\nDuLinkList GetElem_DuL(DuLinkList L, int i)\n{\n    DuLinkList p = L;\n    int j = 0;\n\n    while (p != NULL &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        j += 1;\n    }\n\n    if (p == NULL || j &gt; i)\n    {\n        return NULL;\n    }\n    return p;\n}\n</code></pre></p> </li> <li> <p>\u53cc\u5411\u94fe\u8868\u7684\u63d2\u5165 <pre><code>/* \u5728\u53cc\u5411\u94fe\u8868\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u7ed3\u70b9\uff0ci\u7ed3\u70b9\u5fc5\u987b\u5b58\u5728 */\nStatus ListInsert_DuL(DuLinkList L, int i, ElemType e)\n{\n    DuLinkList p = NULL, q = NULL;\n    p = GetElem_DuL(L, i);\n    if (p == NULL)\n    {\n        return ERROR;\n    }\n\n    q = malloc(sizeof(DuLNode));\n    if (q == NULL)\n    {\n        return ERROR;\n    }\n\n    q-&gt;prior = p-&gt;prior;\n    p-&gt;prior-&gt;next = q;\n\n    q-&gt;next = p;\n    p-&gt;prior = q;\n\n    q-&gt;data = e;\n    return OK;\n}\n</code></pre></p> </li> <li> <p>\u53cc\u5411\u94fe\u8868\u7684\u5220\u9664 <pre><code>/* \u5220\u9664\u53cc\u5411\u94fe\u8868\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9\uff0ci\u4f4d\u7f6e\u5fc5\u987b\u5b58\u5728 */\nStatus ListDelete_DuL(DuLinkList L, int i)\n{\n    DuLinkList p = GetElem_DuL(L, i);\n    if (p == NULL)\n    {\n        return ERROR;\n    }\n    p-&gt;prior-&gt;next = p-&gt;next;\n    p-&gt;next-&gt;prior = p-&gt;prior;\n    free(p);\n    return OK;\n}\n</code></pre></p> </li> </ul>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_11","title":"\u987a\u5e8f\u8868\u548c\u94fe\u8868\u7684\u6bd4\u8f83","text":""},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_12","title":"\u7a7a\u95f4\u6027\u80fd\u6bd4\u8f83","text":""},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_13","title":"\u65f6\u95f4\u6027\u80fd\u6bd4\u8f83","text":""},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_14","title":"\u7ebf\u6027\u8868\u7684\u5e94\u7528","text":"<p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li>\u7ebf\u6027\u8868\u7684\u5408\u5e76</li> </ul> <p>\u4f8b\uff1a\u6c42\u89e3\u4e00\u822c\u96c6\u5408\u7684\u5e76\u96c6\u95ee\u9898\u3002</p> <p>\u5df2\u77e5\u4e24\u4e2a\u96c6\u5408 \\(A\\) \u548c \\(B\\) \uff0c\u73b0\u8981\u6c42\u4e00\u4e2a\u65b0\u7684\u96c6\u5408 \\(A = A \\cup B\\) \u3002\u4f8b\u5982\uff0c\u8bbe $$     A = (7, 5, 3, 11) \\newline     B = (2, 6, 3) $$ \u5408\u5e76\u540e $$     A = (7, 5, 3, 11, 2, 6) $$  </p> <p>\u793a\u4f8b\u4ee3\u7801\uff1a\u987a\u5e8f\u8868\u5408\u5e76 <pre><code>/* \u5c06\u6240\u6709\u5728\u7ebf\u6027\u8868LB\u4e2d\u4f46\u4e0d\u5728\u7ebf\u6027\u8868LA\u4e2d\u7684\u5143\u7d20\u63d2\u5165\u5230LA\u4e2d */\nvoid MergeList(SqList* LA, SqList* LB)\n{\n    int m = LA-&gt;length;\n    int n = LB-&gt;length;\n    int i = 0;\n    ElemType e;\n\n    for (i = 1; i &lt;= n; i += 1)\n    {\n        GetElem(LB, i, &amp;e);\n        if (LocateElem(LA, e) == 0)\n        {\n            m += 1;\n            ListInsert(LA, m, e);\n        }\n    }\n    return;\n}\n</code></pre></p> <ul> <li>\u6709\u5e8f\u8868\u7684\u5408\u5e76</li> </ul> <p>\u82e5\u7ebf\u6027\u8868\u4e2d\u7684\u6570\u636e\u5143\u7d20\u76f8\u4e92\u4e4b\u95f4\u53ef\u4ee5\u6bd4\u8f83\uff0c\u5e76\u4e14\u6570\u636e\u5143\u7d20\u5728\u7ebf\u6027\u8868\u4e2d\u4f9d\u503c\u975e\u9012\u51cf\u6216\u975e\u9012\u589e\u6709\u5e8f\u6392\u5217\uff0c\u5219\u79f0\u8be5\u7ebf\u6027\u8868\u4e3a\u6709\u5e8f\u8868\uff08Ordered List\uff09\u3002</p> <p>\u4f8b\uff1a\u6c42\u89e3\u6709\u5e8f\u96c6\u5408\u7684\u5e76\u96c6\u95ee\u9898\u3002</p> <p>\u6709\u5e8f\u96c6\u5408\u662f\u6307\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u6709\u5e8f\u6392\u5217\u3002\u5df2\u77e5\u4e24\u4e2a\u6709\u5e8f\u96c6\u5408 \\(A\\) \u548c \\(B\\) \uff0c\u6570\u636e\u5143\u7d20\u6309\u6307\u975e\u9012\u51cf\u6709\u5e8f\u6392\u5217\uff0c\u73b0\u8981\u6c42\u4e00\u4e2a\u65b0\u7684\u96c6\u5408 $ C = A \\cup B$ \uff0c\u4f7f\u96c6\u5408 \\(C\\) \u4e2d\u7684\u6570\u636e\u5143\u7d20\u4efb\u6309\u503c\u975e\u9012\u51cf\u6709\u5e8f\u6392\u5217\u3002</p> <p>\u4f8b\u5982\uff0c\u8bbe $$     A = (3, 5, 8, 11) \\newline     B = (2, 6, 8, 9, 11, 15, 20) $$ \u5219 $$     C = (2, 3, 5, 6, 8, 8, 9, 11, 11, 15, 20) $$</p> <ol> <li> <p>\u987a\u5e8f\u6709\u5e8f\u8868\u7684\u5408\u5e76 <pre><code>/* \u5df2\u77e5\u987a\u5e8f\u6709\u5e8f\u8868LA\u548cLB\u7684\u5143\u7d20\u6309\u503c\u975e\u9012\u51cf\u6392\u5217 */\n/* \u5f52\u5e76LA\u548cLB\u5f97\u5230\u65b0\u7684\u987a\u5e8f\u6709\u5e8f\u8868LC\uff0cLC\u7684\u5143\u7d20\u4e5f\u6309\u503c\u975e\u9012\u51cf\u6392\u5217 */\nvoid MergeList_Sq(SqList* LA, SqList* LB, SqList* LC)\n{\n    int m = LA-&gt;length;\n    int n = LB-&gt;length;\n\n    int* pa = LA-&gt;elem;\n    int* pb = LB-&gt;elem;\n    int* pc = LC-&gt;elem;\n\n    int i = 1, j = 1;\n\n    LC-&gt;length = m + n;\n\n    while (i &lt;= m || j &lt;= n)\n    {\n        if (i &gt; m)\n        {\n            *pc++ = *pb++;\n            j += 1;\n        }\n        else if (j &gt; n)\n        {\n            *pc++ = *pa++;\n            i += 1;\n        }\n        else if (*pa &lt;= *pb)\n        {\n            *pc++ = *pa++;\n            i += 1;\n        }\n        else\n        {\n            *pc++ = *pb++;\n            j += 1;\n        }\n    }\n\n    return;\n}\n</code></pre></p> </li> <li> <p>\u94fe\u5f0f\u6709\u5e8f\u8868\u7684\u5408\u5e76 <pre><code>/* \u5df2\u77e5\u5355\u94fe\u8868LA\u548cLB\u7684\u5143\u7d20\u6309\u503c\u975e\u9012\u51cf\u6392\u5217 */\n/* \u5f52\u5e76LA\u548cLB\u5f97\u5230\u65b0\u7684\u5355\u94fe\u8868LC\uff0cLC\u7684\u5143\u7d20\u4e5f\u6309\u503c\u975e\u9012\u51cf\u6392\u5217 */\n/* \u5408\u5e76\u540eLA\uff0cLB\u94fe\u8868\u5f15\u7528\u4e3aNULL\u3002LC\u4e3a\u5408\u5e76\u540e\u5355\u94fe\u8868 */\nvoid MeargList_L(LinkList* LA, LinkList* LB, LinkList* LC)\n{\n    LinkList pa = (*LA)-&gt;next, pb = (*LB)-&gt;next;\n    LinkList pc = *LC;\n\n    *LA = NULL;\n    *LB = NULL;\n\n    while (pa != NULL &amp;&amp; pb != NULL)\n    {\n        if (pa-&gt;data &lt;= pb-&gt;data)\n        {\n            pc-&gt;next = pa;\n            pa = pa-&gt;next;\n        }\n        else\n        {\n            pc-&gt;next = pb;\n            pb = pb-&gt;next;\n        }\n        pc = pc-&gt;next;\n    }\n\n    pc-&gt;next = pa == NULL ? pb : pa;\n\n    return;\n}\n</code></pre></p> </li> </ol>"},{"location":"DataStructures/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_15","title":"\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u73b0","text":"<p>\u7b97\u6cd5\u793a\u4f8b</p> <ul> <li> <p>\u7a00\u758f\u591a\u9879\u5f0f\u7684\u8fd0\u7b97 - \u591a\u9879\u5f0f\u7684\u521b\u5efa <pre><code>typedef struct PNode\n{\n    float coef; // \u7cfb\u6570\n    int expn; // \u6307\u6570\n    struct PNode* next; // \u6307\u9488\u57df\n} PNode, *Polynomial;\n\n/* \u8f93\u5165n\u9879\u7684\u7cfb\u6570\u548c\u6307\u6570\uff0c\u5efa\u7acb\u8868\u793a\u591a\u9879\u5f0f\u7684\u6709\u5e8f\u94fe\u8868P\uff08\u5e26\u5934\u7ed3\u70b9\uff09 */\nvoid CreatePolyn(Polynomial* P, int n)\n{\n    int i = 0;\n    Polynomial node = NULL;\n    Polynomial p = NULL, q = NULL;\n    Polynomial pre = NULL;\n\n    *P = malloc(sizeof(PNode));\n    (*P)-&gt;next = NULL;\n    p = *P;\n\n    for (i = 1; i &lt;= n; i++)\n    {\n        node = malloc(sizeof(PNode));\n        printf(\"\u8bf7\u8f93\u5165\u7cfb\u6570\u548c\u6307\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff1a\");\n        scanf(\"%f %d\", &amp;(node-&gt;coef), &amp;(node-&gt;expn));\n\n        pre = p;\n        q = pre-&gt;next;\n        while (q != NULL &amp;&amp; q-&gt;expn &lt; node-&gt;expn)\n        {\n            pre = q;\n            q = q-&gt;next;\n        }\n\n        if (q != NULL &amp;&amp; q-&gt;expn == node-&gt;expn)\n        {\n            q-&gt;coef += node-&gt;coef;\n            free(node);\n        }\n        else\n        {\n            pre-&gt;next = node;\n            node-&gt;next = q;\n        }\n    }\n    return;\n}\n</code></pre></p> </li> <li> <p>\u7a00\u758f\u591a\u9879\u5f0f\u7684\u8fd0\u7b97 - \u591a\u9879\u5f0f\u7684\u76f8\u52a0 <pre><code>/* \u5408\u5e76\u540epb\u5e94\u8be5\u91ca\u653e\uff0c\u4f46\u662f\u672c\u4f8b\u672a\u8be6\u7ec6\u5904\u7406 */\n/* pa += pb */\nvoid AddPolyn(Polynomial Pa, Polynomial Pb)\n{\n    Polynomial pa = Pa-&gt;next, pb = Pb-&gt;next;\n    Polynomial pre = pa;\n    Polynomial node = NULL;\n\n    while (pa != NULL &amp;&amp; pb != NULL)\n    {\n        if (pa-&gt;expn == pb-&gt;expn)\n        {\n            pa-&gt;coef += pb-&gt;coef;\n            node = pb;\n            pre = pa;\n            pa = pa-&gt;next;\n            pb = pb-&gt;next;\n            free(node);\n        }\n        else if (pa-&gt;expn &lt; pb-&gt;expn)\n        {\n            pre = pa;\n            pa = pa-&gt;next;\n        }\n        else if (pa-&gt;expn &gt; pb-&gt;expn)\n        {\n            node = pb;\n            pb = pb-&gt;next;\n            pre-&gt;next = node;\n            node-&gt;next = pa;\n        }\n    }\n\n    if (pa == NULL &amp;&amp; pb != NULL)\n    {\n        pre-&gt;next = pb;\n    }\n\n    return;\n}\n</code></pre></p> </li> </ul>"},{"location":"English/","title":"English","text":""},{"location":"FurtherMathematics/","title":"Further Mathematics","text":""},{"location":"OpenGL/","title":"OpenGL","text":""},{"location":"OperatingSystem/","title":"\u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"Python/","title":"Python","text":""}]}